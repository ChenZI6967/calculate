#####读取文件####
# chandu_all<-read.csv('D:\\数据库\\北京\\1812\\totalchandu2018.csv',stringsAsFactors = F)
# chusheng_all<-read.csv('D:\\数据库\\北京\\1812\\totalchusheng2018.csv',stringsAsFactors = F)
# renjian_all<-read.csv('D:\\数据库\\北京\\1812\\totalrenjian2018.csv',stringsAsFactors = F)
# shujing_all<-read.csv('D:\\数据库\\北京\\1812\\totalshujing2018.csv',stringsAsFactors = F)
chandu_all <- read.csv('D:\\数据库\\北京\\格式化数据（一直更新）\\2008\\cd.csv',stringsAsFactors=F)
shujing_all <- read.csv('D:\\数据库\\北京\\格式化数据（一直更新）\\2008\\sj.csv',stringsAsFactors=F)
chusheng_all <- read.csv('D:\\数据库\\北京\\格式化数据（一直更新）\\2008\\cs.csv',stringsAsFactors=F)
renjian_all <- read.csv('D:\\数据库\\北京\\格式化数据（一直更新）\\2008\\rj.csv',stringsAsFactors=F)
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors = F)
MCORID<-read.csv('D:\\数据库\\北京\\系谱\\公牛对照表201907.csv',stringsAsFactors= F ,encoding='GB18030')
herdnum<-read.csv('D:\\数据库\\北京\\系谱\\场号.csv',stringsAsFactors= F)
# sj19<-read.csv('D:\\数据库\\北京\\1912\\2019totalshujing.csv',stringsAsFactors=F)
# cd19<-read.csv('D:\\数据库\\北京\\1912\\2019totalchandu.csv',stringsAsFactors=F)
# rj19<-read.csv('D:\\数据库\\北京\\1912\\2019totalrenjian.csv',stringsAsFactors=F)
# cs19<-read.csv('D:\\数据库\\北京\\1912\\2019totalchusheng.csv',stringsAsFactors=F)
# 
# # ped_all<-ped_all[,c(4,2,3,7)]
# # ped1<-merge(ped_all,ped,by.x='sire',by.y='id',all.x = T)
# # ped1<-merge(ped1,ped,by.x='dam',by.y='id',all.x = T)
# # ped1<-ped1[,c(3,5,6,4)]
# # colnames(ped1)<-c('ID','MID','DID','BIR')
# # ped1[is.na(ped1$MID),2]<-0
# # ped1[is.na(ped1$DID),3]<-0
# # ped1$BIR<-as.Date(ped1$BIR,format = '%Y/%m/%d')
# # ped1$BIR<-as.numeric(ped1$BIR)
# # ped1[is.na(ped1$BIR),4]<-0
# # write.table(ped1,'pedigree',row.names = F,col.names = F,quote=F)
# #####整理20年数据####
# #2020年8月数据
# cd20<-read.csv('D:\\数据库\\北京\\2008\\繁殖数据导出2020年1-6月\\新建文件夹\\产犊数据.csv',stringsAsFactors = F,encoding = 'gbk')
# sj20<-read.csv('D:\\数据库\\北京\\2008\\繁殖数据导出2020年1-6月\\新建文件夹\\配种数据.csv',stringsAsFactors = F,encoding = 'gbk')
# cs20<-read.csv('D:\\数据库\\北京\\2008\\繁殖数据导出2020年1-6月\\新建文件夹\\出生.csv',stringsAsFactors = F,encoding = 'gbk')
# rj20<-read.csv('D:\\数据库\\北京\\2008\\繁殖数据导出2020年1-6月\\新建文件夹\\妊检数据.csv',stringsAsFactors = F,encoding = 'gbk')
# # #2020年12月数据
# # cd2<-read.csv('',stringsAsFactors = F,encoding = 'gbk')
# # sj2<-read.csv('',stringsAsFactors = F,encoding = 'gbk')
# # cs2<-read.csv('',stringsAsFactors = F,encoding = 'gbk')
# # rj2<-read.csv('',stringsAsFactors = F,encoding = 'gbk')
# 
# # cd19<-rbind(cd1,cd2)
# # rm(cd1,cd2)
# # names(sj2)[10]<-'配种类型'
# # sj19<-rbind(sj1,sj2)
# # rm(sj1,sj2)
# # cs19<-rbind(cs1,cs2)
# # rm(cs1,cs2)
# # rj19<-rbind(rj1,rj2)
# # rm(rj1,rj2)
# # 
# ######格式化产犊#####
# cd20<-cd20[-which(grepl('娟姗',cd20$牛场名称)==T),]
# cd20[,3]<-stringr::str_trim(cd20[,3],'both')
# cd20[,1]<-stringr::str_trim(cd20[,1],'both')
# cd20[,11]<-substr(cd20[,3],1,nchar(cd20[,1]))
# for (i in 1:57){
#   cd20[which(grepl(herdnum[i,2],cd20$牛场名称)),12]<-herdnum[i,1]
# }
# cd20[which(cd20$牛场名称=='白城公司'),3]<-paste(substr(cd20[which(cd20$牛场名称=='白城公司'),3],1,4),substr(cd20[which(cd20$牛场名称=='白城公司'),3],6,nchar(cd20[which(cd20$牛场名称=='白城公司'),3])),sep='')
# cd20[which(cd20$牛场编号==cd20$V11),13]<-substr(cd20[which(cd20$牛场编号==cd20$V11),3],nchar(cd20[which(cd20$牛场编号==cd20$V11),1])+1,nchar(cd20[which(cd20$牛场编号==cd20$V11),3]))
# cd20[,14]<-stringr::str_pad(cd20[,13],6,'left',pad='0')
# cd20[which(nchar(cd20[,14])==7),14]<-substr(cd20[which(nchar(cd20[,14])==7),14],2,7)
# cd20[,15]<-paste('F',cd20$V12,cd20[,14],sep='')
# cd20[is.na(cd20$V13),15]<-paste('F',cd20[is.na(cd20$V13),3],sep='')
# cd20[which(nchar(cd20$牛号)<7),15]<-paste('F',cd20[which(nchar(cd20$牛号)<7),1],stringr::str_pad(cd20[which(nchar(cd20$牛号)<7),3],6,'left',pad='0'),sep='')
# cd20[is.na(cd20$V14),14]<-substr(cd20[is.na(cd20$V14),3],7,nchar(cd20[is.na(cd20$V14),3]))
# cd20[,14]<-stringr::str_pad(cd20[,14],6,'left',pad='0')
# cd20[,15]<-paste('F',cd20$V12,cd20[,14],sep='')
# cd20[cd20$V14=='000000',15] <- paste('F',cd20[cd20$V14=='000000',1],stringr::str_pad(cd20[cd20$V14=='000000',3],6,'left',pad='0'),sep='')
# cd20 <- cd20[-which(nchar(cd20$V15)>=14),]
# cd20<-cd20[,-c(11,13,14)]
# names(cd20)[12]<-'FID'
# 
# cd20<-cd20[,c(11,2:10,12)]
# cd20[which(cd20$产犊难易==0),7]<-NA
# cd20[which(cd20$产犊难易 %in% seq(2,4)),7]<-2
# cd20[which(cd20$产犊难易==1),7]<-1
# cd20[which(cd20$产犊难易==5),7]<-3
# cd20[which(grepl('母牛',cd20$犊牛性别)==T),8]<-2
# cd20[which(grepl('公牛',cd20$犊牛性别)==T),8]<-1
# cd20[which(grepl('死胎',cd20$存活情况)==T),9]<-2
# cd20[which(grepl('正常',cd20$存活情况)==T),9]<-1
# cd20[,c(12:20)]<-NA
# cd20<-cd20[,c(3,5,12,13,4,14:16,10,17,1,11,7,8,9)]
# names(cd20)<-c('牛号','日期','事件','事件信息','胎次','泌乳天数','日产量','产犊方式','出生重','配种员','HERD','FID','CE','SEX','SB')
# 
# ######格式化妊娠#####
# rj20<-rj20[-which(grepl('娟姗',rj20$牛场名称)==T),]
# rj20[,3]<-stringr::str_trim(rj20[,3],'both')
# rj20[,1]<-stringr::str_trim(rj20[,1],'both')
# rj20[,9]<-substr(rj20[,3],1,nchar(rj20[,1]))
# for (i in 1:57){
#   rj20[which(grepl(herdnum[i,2],rj20$牛场名称)),10]<-herdnum[i,1]
# }
# rj20[which(rj20$牛场名称=='白城公司'),3]<-paste(substr(rj20[which(rj20$牛场名称=='白城公司'),3],1,4),substr(rj20[which(rj20$牛场名称=='白城公司'),3],6,nchar(rj20[which(rj20$牛场名称=='白城公司'),3])),sep='')
# rj20[which(rj20$牛场编号==rj20$V9),11]<-substr(rj20[which(rj20$牛场编号==rj20$V9),3],nchar(rj20[which(rj20$牛场编号==rj20$V9),1])+1,nchar(rj20[which(rj20$牛场编号==rj20$V9),3]))
# rj20[,12]<-stringr::str_pad(rj20[,11],6,'left',pad='0')
# rj20[which(nchar(rj20[,12])==7),12]<-substr(rj20[which(nchar(rj20[,12])==7),12],2,7)
# rj20[,13]<-paste('F',rj20$V10,rj20[,12],sep='')
# rj20[is.na(rj20$V11),13]<-paste('F',rj20[is.na(rj20$V11),3],sep='')
# rj20[which(nchar(rj20$牛号)<7),13]<-paste('F',rj20[which(nchar(rj20$牛号)<7),1],stringr::str_pad(rj20[which(nchar(rj20$牛号)<7),3],6,'left',pad='0'),sep='')
# rj20[is.na(rj20$V12),12]<-substr(rj20[is.na(rj20$V12),3],7,nchar(rj20[is.na(rj20$V12),3]))
# rj20[,12]<-stringr::str_pad(rj20[,12],6,'left',pad='0')
# rj20[,13]<-paste('F',rj20$V10,rj20[,12],sep='')
# rj20[rj20$V12=='000000',13] <- paste('F',rj20[rj20$V12=='000000',1],stringr::str_pad(rj20[rj20$V12=='000000',3],6,'left',pad='0'),sep='')
# rj20 <- rj20[-which(nchar(rj20$V13)>=14),]
# rj20<-rj20[,-c(9,11,12)]
# names(rj20)[10]<-'FID'
# 
# rj20<-rj20[,c(9,2:8,10)]
# rj20[which(grepl('怀孕',rj20$妊检结果)==T),6]<-'+'
# rj20[which(grepl('空怀',rj20$妊检结果)==T),6]<-'-'
# rj20[,10:20]<-NA
# rj20<-rj20[,c(3,5,10,6,4,11:15,1,9)]
# names(rj20)<-c('牛号','日期','事件','事件信息','胎次','泌乳天数','日产量','产犊方式','出生重','配种员','HERD','FID')
# 
# # cs19[,8:15]<-NA
# # cs19<-cs19[,c(3,4,8,5,9:14,1,7)]
# # names(cs19)<-c('牛号','日期','事件','事件信息','胎次','泌乳天数','日产量','产犊方式','出生重','配种员','HERD','FID')
# # 
# # write.csv(sj19,'D:\\数据库\\北京\\1912\\2019totalshujing.csv',row.names=F)
# # write.csv(cd19,'D:\\数据库\\北京\\1912\\2019totalchandu.csv',row.names=F)
# # write.csv(rj19,'D:\\数据库\\北京\\1912\\2019totalrenjian.csv',row.names=F)
# # write.csv(cs19,'D:\\数据库\\北京\\1912\\2019totalchusheng.csv',row.names=F)
# 
# 
# ######格式化输精#######
# sj20<-sj20[-which(grepl('娟姗',sj20$牛场名称)==T),]
# sj20[,3]<-stringr::str_trim(sj20[,3],'both')
# sj20[,1]<-stringr::str_trim(sj20[,1],'both')
# sj20[,12]<-substr(sj20[,3],1,nchar(sj20[,1]))
# for (i in 1:57){
#   sj20[which(grepl(herdnum[i,2],sj20$牛场名称)),13]<-herdnum[i,1]
# }
# sj20[which(sj20$牛场名称=='白城公司'),3]<-paste(substr(sj20[which(sj20$牛场名称=='白城公司'),3],1,4),substr(sj20[which(sj20$牛场名称=='白城公司'),3],6,nchar(sj20[which(sj20$牛场名称=='白城公司'),3])),sep='')
# sj20[which(sj20$牛场编号==sj20$V12),14]<-substr(sj20[which(sj20$牛场编号==sj20$V12),3],nchar(sj20[which(sj20$牛场编号==sj20$V12),1])+1,nchar(sj20[which(sj20$牛场编号==sj20$V12),3]))
# sj20[,15]<-stringr::str_pad(sj20[,14],6,'left',pad='0')
# sj20[which(nchar(sj20[,15])==7),15]<-substr(sj20[which(nchar(sj20[,15])==7),15],2,7)
# sj20[,16]<-paste('F',sj20$V13,sj20[,15],sep='')
# sj20[is.na(sj20$V14),16]<-paste('F',sj20[is.na(sj20$V14),3],sep='')
# sj20[which(nchar(sj20$牛号)<7),16]<-paste('F',sj20[which(nchar(sj20$牛号)<7),1],stringr::str_pad(sj20[which(nchar(sj20$牛号)<7),3],6,'left',pad='0'),sep='')
# sj20[is.na(sj20$V15),15]<-substr(sj20[is.na(sj20$V15),3],7,nchar(sj20[is.na(sj20$V15),3]))
# sj20[,15]<-stringr::str_pad(sj20[,15],6,'left',pad='0')
# sj20[,16]<-paste('F',sj20$V13,sj20[,15],sep='')
# sj20[sj20$V15=='000000',16] <- paste('F',sj20[sj20$V15=='000000',1],stringr::str_pad(sj20[sj20$V15=='000000',3],6,'left',pad='0'),sep='')
# sj20 <- sj20[-which(nchar(sj20$V16)>=14),]
# sj20<-sj20[,-c(12,14,15)]
# names(sj20)[13]<-'FID'
# 
# sj20<-sj20[,c(12,2:11,13)]
# sj20[,c(13:20)]<-NA
# sj20<-sj20[,c(3,5,13,14,4,15:18,8,1,12)]
# names(sj20)<-c('牛号','日期','事件','事件信息','胎次','泌乳天数','日产量','产犊方式','出生重','配种员','HERD','FID')
# 
# 
# ######格式化出生######
# cs20<-cs20[-which(substr(cs20$牛号,1,1)=='G'),]
# cs20<-cs20[-which(grepl('娟姗',cs20$牛场名称)==T),]
# cs20[,3]<-stringr::str_trim(cs20[,3],'both')
# cs20[,1]<-stringr::str_trim(cs20[,1],'both')
# cs20[,7]<-substr(cs20[,3],1,nchar(cs20[,1]))
# for (i in 1:57){
#   cs20[which(grepl(herdnum[i,2],cs20$牛场名称)),8]<-herdnum[i,1]
# }
# cs20[which(cs20$牛场名称=='白城分公司'),3]<-paste(substr(cs20[which(cs20$牛场名称=='白城分公司'),3],1,4),substr(cs20[which(cs20$牛场名称=='白城分公司'),3],6,nchar(cs20[which(cs20$牛场名称=='白城分公司'),3])),sep='')
# cs20[which(cs20$牛场编号==cs20$V7),9]<-substr(cs20[which(cs20$牛场编号==cs20$V7),3],nchar(cs20[which(cs20$牛场编号==cs20$V7),1])+1,nchar(cs20[which(cs20$牛场编号==cs20$V7),3]))
# cs20[,10]<-stringr::str_pad(cs20[,9],6,'left',pad='0')
# cs20[which(nchar(cs20[,10])==7),10]<-substr(cs20[which(nchar(cs20[,10])==7),10],2,7)
# cs20[,11]<-paste('F',cs20$V8,cs20[,10],sep='')
# cs20[is.na(cs20$V9),11]<-paste('F',cs20[is.na(cs20$V9),3],sep='')
# cs20[which(nchar(cs20$牛号)<7),11]<-paste('F',cs20[which(nchar(cs20$牛号)<7),1],stringr::str_pad(cs20[which(nchar(cs20$牛号)<7),3],6,'left',pad='0'),sep='')
# cs20[is.na(cs20$V10),10]<-substr(cs20[is.na(cs20$V10),3],7,nchar(cs20[is.na(cs20$V10),3]))
# cs20[,10]<-stringr::str_pad(cs20[,10],6,'left',pad='0')
# cs20[,11]<-paste('F',cs20$V8,cs20[,10],sep='')
# cs20[cs20$V10=='000000',11] <- paste('F',cs20[cs20$V10=='000000',1],stringr::str_pad(cs20[cs20$V10=='000000',3],6,'left',pad='0'),sep='')
# cs20 <- cs20[-which(nchar(cs20$V11)>=14),]
# cs20<-cs20[,-c(7,9,10)]
# names(cs20)[8]<-'FID'
# 
# cs20<-cs20[,c(7,2:6,8)]
# cs20[,8:15]<-NA
# cs20<-cs20[,c(3,4,8,5,9:14,1,7)]
# names(cs20)<-c('牛号','日期','事件','事件信息','胎次','泌乳天数','日产量','产犊方式','出生重','配种员','HERD','FID')
# 
# 
# #####对合并的初始数据进行处理#####
# chandu_all[,c(13:15)]<-NA
# names(chandu_all)[13:15]<-c('CE','SEX','SB')
# shujing_all<-rbind(shujing_all,sj19,sj20)
# chusheng_all<-rbind(chusheng_all,cs19,cs20)
# chandu_all<-rbind(chandu_all,cd19,cd20)
# renjian_all<-rbind(renjian_all,rj19,rj20)
# chusheng_all<-chusheng_all[!duplicated(chusheng_all$FID),]
# shujing_all$aa<-as.numeric(as.Date(shujing_all$日期))
# shujing_all$aa<-paste(shujing_all$aa,shujing_all$FID,sep='')
# shujing_all<-shujing_all[!duplicated(shujing_all$aa),]
# shujing_all<-shujing_all[,-13]
# chandu_all$aa<-paste(chandu_all$FID,chandu_all$胎次,sep='')
# library(dplyr)
# library(magrittr)
# chandu_all%<>%
#   group_by(aa)%>%
#   filter(日期 %in% max(日期))%>%
#   ungroup()
# chandu_all<-chandu_all[!duplicated(chandu_all$aa),]
# chandu_all<-chandu_all[,-16]
# 
# rm(cd19,cs19,rj19,cd20,cs20,rj20,sj19,sj20)
# write.csv(chandu_all,'D:\\数据库\\北京\\格式化数据（一直更新）\\cd.csv',row.names=F)
# write.csv(shujing_all,'D:\\数据库\\北京\\格式化数据（一直更新）\\sj.csv',row.names=F)
# write.csv(renjian_all,'D:\\数据库\\北京\\格式化数据（一直更新）\\rj.csv',row.names=F)
# write.csv(chusheng_all,'D:\\数据库\\北京\\格式化数据（一直更新）\\cs.csv',row.names=F)

herdrenum<-data.frame(chandu_all[!duplicated(chandu_all$HERD),11])
names(herdrenum)[1]<-'HERD'
herdrenum[,2]<-1:length(herdrenum$HERD)
names(herdrenum)[1:2]<-c('herd','herdrenum') 
chandu_all<-merge(herdrenum,chandu_all,by.x='herd',by.y='HERD',all.y=T)
chandu_all<-chandu_all[,-1]
shujing_all<-merge(herdrenum,shujing_all,by.x='herd',by.y='HERD',all.y=T)
shujing_all<-shujing_all[,-1]
renjian_all<-merge(herdrenum,renjian_all,by.x='herd',by.y='HERD',all.y=T)
renjian_all<-renjian_all[,-1]
chusheng_all<-merge(herdrenum,chusheng_all,by.x='herd',by.y='HERD',all.y=T)
chusheng_all<-chusheng_all[,-1]

chandu_all[which(chandu_all$胎次 == '--'),6]<-0
chandu_all$胎次<-as.numeric(chandu_all$胎次)
chandu_all[which(chandu_all$胎次 >20),6]<-NA
chusheng_all[which(chusheng_all$胎次 == '--'),6]<-0
chusheng_all$胎次<-as.numeric(chusheng_all$胎次)
chusheng_all[which(chusheng_all$胎次 >20),6]<-NA
renjian_all[which(renjian_all$胎次 == '--'),6]<-0
renjian_all$胎次<-as.numeric(renjian_all$胎次)
renjian_all[which(renjian_all$胎次 >20),6]<-NA
shujing_all[which(shujing_all$胎次 == '--'),6]<-0
shujing_all$胎次<-as.numeric(shujing_all$胎次)
shujing_all[which(shujing_all$胎次 >20),6]<-NA
shujing_all$日期<-as.Date(shujing_all$日期)
chandu_all$日期<-as.Date(chandu_all$日期)
renjian_all$日期<-as.Date(renjian_all$日期)
chusheng_all$日期<-as.Date(chusheng_all$日期)
shujing_all$重编号<-1:length(shujing_all$herdrenum)
chandu_all$重编号<-1:length(chandu_all$herdrenum)
renjian_all$重编号<-1:length(renjian_all$herdrenum)
chusheng_all$重编号<-1:length(chusheng_all$herdrenum)

library(lubridate)
shujing_all$YMI<-paste(year(shujing_all$日期),month(shujing_all$日期),sep='')
shujing_all$HYI<-paste(shujing_all$herdrenum,as.numeric(year(shujing_all$日期)),sep='')
chandu_all$YMC<-paste(year(chandu_all$日期),month(chandu_all$日期),sep='')
chandu_all$HYC<-paste(chandu_all$herdrenum,as.numeric(year(chandu_all$日期)),sep='')
chusheng_all$YMB<-paste(year(chusheng_all$日期),month(chusheng_all$日期),sep='')
chusheng_all$HYB<-paste(chusheng_all$herdrenum,as.numeric(year(chusheng_all$日期)),sep='')

#修改日期列名
names(shujing_all)[3]<-'sjdate'
names(chandu_all)[3]<-'cddate'
names(chusheng_all)[3]<-'csdate'

#统一从2000开始（包括2000）
shujing_all<-shujing_all[which(year(shujing_all$sjdate)>1999),]
chandu_all<-chandu_all[which(year(chandu_all$cddate)>1999),]
chusheng_all<-chusheng_all[which(year(chusheng_all$csdate)>1999),]

#出生事件有重复，删除同号不同出生日期的数据
chusheng_deleted<-chusheng_all[!duplicated(chusheng_all[,c('FID','csdate')]),]
library(dplyr)
library(magrittr)
chusheng_deleted%<>%
  group_by(FID)%>%
  filter(row_number()==1)%>%
  ungroup()

# #配种员（导出后手动修改）
# st<-as.data.frame(table(shujing_all$配种员))
# write.csv(st,'st2008.csv',row.names = F)

######表型计算初步#####
#初配日龄AFS计算及质控#
#初配日龄为青年牛性状，其意为每头牛首次配种的日期与其出生日期之差（单位：天）。
#计算时首先筛选出每头牛首次配种的时间，再与出生事件中各牛的出生日期相减即可。
shujing_first<-shujing_all[which(shujing_all$胎次 == '0'),]
shujing_first%<>%
  group_by(FID)%>%
  filter(sjdate %in% min(sjdate))%>%
  ungroup()
chusheng_AFS<-chusheng_deleted[,c('FID','csdate')]
AFS_all<-merge(shujing_first,chusheng_AFS,by='FID',all.x=T)
AFS_all$AFS<-AFS_all$sjdate-AFS_all$csdate
AFS_controled<-AFS_all[which(AFS_all$AFS %in% seq(270,900)),]
AFS_controled%<>%
  group_by(FID)%>%
  filter(重编号 %in% min(重编号))%>%
  ungroup()
library(ggplot2)
# ggplot(AFS_controled,mapping=aes(x=as.numeric(AFS_controled$AFS)))+geom_bar(stat='count')#观察数据分布
rm(AFS_all)

#初产日龄AFC计算及质控
#初产日龄为青年牛性状，当每头牛胎次为1时即为第一次产犊，产犊的日期与该牛出生日期之差（单位：天）即为初产日龄性状。
#计算方法：先从产犊事件中筛选出胎次=1时各牛的产犊日期，再与出生事件中各牛出生日期相减即可。
chandu_first<-chandu_all[which(chandu_all$胎次 == '1'),]
chandu_first%<>%
  group_by(FID)%>%
  filter(cddate %in% min(cddate))%>%
  filter(重编号 %in% min(重编号))%>%
  ungroup()
chusheng_AFC<-chusheng_deleted[,c('FID','csdate')]
AFC_all<-merge(chandu_first,chusheng_AFS,by='FID',all.x=T)
AFC_all$AFC<-AFC_all$cddate-AFC_all$csdate
AFC_controled<-AFC_all[which(AFC_all$AFC %in% seq(500,1100)),]
# ggplot(AFC_controled,mapping=aes(x=as.numeric(AFC_controled$AFC)))+geom_bar(stat='count')#观察数据分布
rm(chusheng_AFS,chusheng_AFC,AFC_all)

#首末次配种间隔IFL计算及质控
#首末配种间隔为青年牛与经产牛共有的性状之一。
#计算IFL时需先提取牛只每个胎次内第一次配种和最后一次配种的时间，之后相减即可。
#若首配就配上，则IFL=0
#提取妊检结果，0代表未配上，1代表配上，2代表不定
# renjian_all[grep('(-)',renjian_all$事件信息),14]<-0
# renjian_all[grep('(－)',renjian_all$事件信息),14]<-0
# renjian_all[grep('(±)',renjian_all$事件信息),14]<-2
# renjian_all[is.na(renjian_all$V14),14]<-1
# renjian_deleted<-renjian_all[!is.na(renjian_all$胎次),c('FID','胎次','日期','V14')]
#确定那些妊检为不定结果的数据是否为截断数据
chandu_deleted<-chandu_all[complete.cases(chandu_all$胎次),-c(1,2,4,7,8,10,11)]
chandu_deleted%<>%
  group_by(FID,胎次)%>%
  filter(cddate %in% min(cddate))%>%
  ungroup()
# names(renjian_deleted)[3]<-'rjdate'
# renjian_deleted$胎次<-renjian_deleted$胎次+1
# renjian_chandu<-merge(chandu_deleted,renjian_deleted,by=c('FID','胎次'),all=T)
# renjian_chandu<-renjian_chandu[complete.cases(renjian_chandu$cddate),]
# renjian_chandu<-renjian_chandu[-which(renjian_chandu$V14 == 0 ),]
# renjian_chandu<-renjian_chandu[complete.cases(renjian_chandu$V14),]
# renjian_chandu$dift<-renjian_chandu$cddate-renjian_chandu$rjdate
# renjian_chandu<-renjian_chandu[which(renjian_chandu$dift > 0 ),]
# renjian_chandu$cowparity<-paste(renjian_chandu$FID,renjian_chandu$胎次,sep='')
# renjian_chandu%<>%
#   group_by(cowparity)%>%
#   filter(dift %in% min(dift))%>%
#   filter(cddate %in% min(cddate))%>%
#   ungroup()
# renjian_useful<-renjian_chandu[!duplicated(renjian_chandu$cowparity),c(12,15)]
rm(renjian_all,renjian_chandu)
#提取所有胎次首次输精数据
shujing_deleted<-shujing_all[complete.cases(shujing_all$胎次),]
shujing_deleted$cowparity<-paste(shujing_deleted$FID,shujing_deleted$胎次+1,sep='')
shujing_allfirst<-shujing_deleted%>%
  group_by(cowparity)%>%
  filter(sjdate %in% min(sjdate))%>%
  ungroup()
#匹配输精数据与妊检为+的数据，提取配妊数据。
#对于匹配不到妊检数据的输精记录，以最后一次输精认为配妊。
# #以妊娠结果为+的前一次输精为配妊。
# shujing_pr<-shujing_deleted[,c(3,6,11,12,16,14,15)]
# write.csv(shujing_pr,'shujingpr2008.csv',row.names=F)
# write.csv(renjian_useful,'renjianuse2008.csv',row.names=F)
renjian_useful<-read.csv('renjianuse2008.csv',stringsAsFactors = F)
shujing_pr<-read.csv('shujingpr2008.csv',stringsAsFactors = F)
renjian_useful$rjdate<-as.Date(renjian_useful$rjdate)
shujing_pr$sjdate<-as.Date(shujing_pr$sjdate)
IFL_pr<-merge(shujing_pr,renjian_useful,by='cowparity',all.x = T)
IFL_pr$interval<-IFL_pr$rjdate-IFL_pr$sjdate
IFL_pr1<-IFL_pr[complete.cases(IFL_pr$interval),]
IFL_pr1<-IFL_pr1[which(IFL_pr1$interval>0),]
IFL_pr1%<>%
  group_by(cowparity)%>%
  filter(interval %in% min(interval))%>%
  ungroup()
IFL_pr2<-IFL_pr[is.na(IFL_pr$interval),]
IFL_pr2%<>%
  group_by(cowparity)%>%
  filter(sjdate %in% max(sjdate))%>%
  ungroup()
IFL_pr2<-IFL_pr2[!duplicated(IFL_pr2$cowparity),]
IFL_pr1<-IFL_pr1[!duplicated(IFL_pr1$cowparity),]
peiren_all<-rbind(IFL_pr2,IFL_pr1)
peiren_all<-peiren_all[,-c(8,9)]
rm(IFL_pr1,IFL_pr2,IFL_pr)
#匹配首末次输精数据并计算IFL、质控
IFL_all<-merge(shujing_allfirst,peiren_all,by='cowparity',all.x=T)
IFL_all$IFL<-IFL_all$sjdate.y-IFL_all$sjdate.x
IFL_all<-IFL_all[complete.cases(IFL_all$IFL),]
IFL_controled<-IFL_all[which(IFL_all$IFL %in% seq(0,230)),-c(17:22)]
rm(IFL_all)
# ggplot(IFL_controled,mapping=aes(x=as.numeric(IFL_controled$IFL)))+geom_bar(stat='count')

#产后首次配种间隔ICF
#产后首次配种间隔是经产牛性状，其计算需要每头牛每个胎次的首次配种时间，以及各个胎次对应的产犊时间，利用首次配种时间与产犊时间相减即可得到ICF。
chandu_deleted$cowparity<-paste(chandu_deleted$FID,chandu_deleted$胎次,sep='')
shujing_allfirst%<>%
  group_by(cowparity)%>%
  filter(重编号 %in% max(重编号))%>%
  ungroup()
shujing_allfirst_ICF<-shujing_allfirst[,c(6,12,11,3)]
ICF_all<-merge(chandu_deleted,shujing_allfirst_ICF,by=c('FID','胎次'),all.x=T)
ICF_all$ICF<-ICF_all$sjdate-ICF_all$cddate
ICF_controled<-ICF_all%>%
  filter(ICF %in% seq(20,230))
#异常值较多，例如88
#剔除系统自动填充的值
adjust<-ICF_controled[,c(1,2,3,9)]
adjust2<-adjust
adjust2$dt1<-adjust2$cddate+lubridate::years(1)+days(1)
adjust2$dt2<-adjust2$cddate+lubridate::years(1)-days(1)
adjust2$dt3<-adjust2$cddate+lubridate::years(1)
adjust2$胎次<-adjust2$胎次+1
hb<-merge(adjust2,adjust,by=c('FID','胎次'),all.x=T)
hb[which(hb$cddate.y==hb$dt1|hb$cddate.y==hb$dt2|hb$cddate.y==hb$dt3),10]<-1
hb<-hb[complete.cases(hb$V10),]
a<-data.frame(hb[,4])
b<-data.frame(hb[,9])
names(a)<-'numa'
names(b)<-'numb'
a$V2<-1
b$V2<-1
a<-a[!duplicated(a$numa),]
b<-b[!duplicated(b$numb),]
adjust3<-merge(ICF_controled,a,by.x='重编号',by.y='numa',all.x=T)
adjust3<-adjust3[-which(adjust3$V2==1),]
adjust3<-adjust3[,-16]
ICF_adjust<-merge(adjust3,b,by.x='重编号',by.y='numb',all.x=T)
ICF_adjust<-ICF_adjust[-which(ICF_adjust$V2==1),]
ICF_adjust<-ICF_adjust[,-16]
#观察ICF分布
# ggplot(ICF_adjust,mapping=aes(x=as.numeric(ICF_adjust$ICF)))+geom_bar(stat='count')
rm(a,b,adjust,adjust2,adjust3,ICF_controled,ICF_all,hb)
#产犊难易CE的计算
#产犊难易是经产牛和青年牛共有的性状之一，分为3个等级：0,1,2对应正常，助产，难产或倒产。
#计算方式为筛选产犊方式列，按照对应数字赋值即可。
CE_all<-chandu_deleted
library(openintro)
myfun<-function(x){
  if (x=='早产'|x=='助产'){
    2
  } else {
    if (x=='正常'|x=='顺产'){
      1
    } else {
      if (x=='难产'|x=='倒产'){
        3
      } else {
        NA
      }
    }
  }
}
CE_all_1<-CE_all[is.na(CE_all$产犊方式),]
CE_all_2<-CE_all[complete.cases(CE_all$产犊方式),]
a<-data.frame(apply(matrix(CE_all_2$产犊方式),1,myfun))
CE_all_2<-cbind(CE_all_2,a)
names(CE_all_2)[13]<-'CE1'
CE_all_1[,13]<-CE_all_1$CE
names(CE_all_1)[13]<-'CE1'
CE_all<-rbind(CE_all_1,CE_all_2)
CE_all<-CE_all[,-c(6,8)]
names(CE_all)[11]<-'CE'
CE_deleted<-CE_all[!duplicated(CE_all$cowparity),]
CE_deleted<-CE_deleted[complete.cases(CE_deleted$CE),]
# ggplot(CE_deleted,mapping=aes(x=factor(CE_deleted$CE)))+geom_bar(stat='count')
rm(CE_all,a,myfun,CE_all_1,CE_all_2)

#死胎SB的计算
#产犊难易是经产牛和青年牛共有的性状之一，分为2个等级：1,2对应正常，死胎。
#计算方式为筛选产犊事件信息列，选取出包含死胎的观测，按照对应数字赋值即可。
SB_all<-chandu_deleted
myfun<-function(x){
  if (grepl('正常',x)==T){
    1
  } else {
    if (grepl('出售',x)==T){
      1
    } else {
      if (grepl('死',x)==T){
        2
      } else {
        NA
      }
    }
  }
}
SB_all_1<-SB_all[is.na(SB_all$事件信息),]
SB_all_2<-SB_all[complete.cases(SB_all$事件信息),]
a<-data.frame(apply(matrix(SB_all_2$事件信息),1,myfun))
SB_all_2<-cbind(SB_all_2,a)
names(SB_all_2)[13]<-'SB1'
SB_all_1$SB1<-SB_all_1$SB
SB_all<-rbind(SB_all_1,SB_all_2)
SB_all<-SB_all[,-c(6,8)]
names(SB_all)[11]<-'SB'
SB_deleted<-SB_all[complete.cases(SB_all$SB),]
# ggplot(SB_deleted,mapping=aes(x=factor(SB_deleted$SB)))+geom_bar(stat='count')
rm(a,myfun,SB_all)

######提取效应#####
#提取犊牛性别效应
#犊牛性别可以通过产犊事件信息中的犊牛号来分类，G开头为公犊牛为1，全是数字的牛号为母犊牛为2，双胞胎以上定义为3。
#对SB提取
SB_deleted_1<-SB_deleted[is.na(SB_deleted$事件信息),]
SB_deleted_2<-SB_deleted[complete.cases(SB_deleted$事件信息),]
a<-strsplit(SB_deleted_2$事件信息,'; ;')
b<-as.data.frame(t(data.frame(a[1:length(a)])))
row.names(b)<-NULL
SB_factor<-cbind(SB_deleted_2,b)
SB_factor$V2<-NA
SB_factor[which(grepl('-正常',SB_factor$V1)|grepl('-出售',SB_factor$V1)==T),13]<-2
SB_factor[which(grepl('G',SB_factor$V1)==T),13]<-1
SB_factor[which(nchar(as.character(SB_factor$V1))>12),13]<-3
SB_factor[is.na(SB_factor$V2),13]<-999999
SB_factor<-SB_factor[,-12]
names(SB_factor)[12]<-'SEX'
rm(a,b)
SB_factor<-SB_factor[,-c(1,4,6,7,10)]
SB_deleted_1<-SB_deleted_1[,c(2,3,5,8,9,11,6)]
SB_factor<-rbind(SB_factor,SB_deleted_1)
SB_factor$num<-1:length(SB_factor$FID)
a1<-SB_factor[which(grepl('名字',SB_factor$事件信息)==T),]
a2<-SB_factor[which(grepl('名字',SB_factor$事件信息)==F),]
a<-strsplit(a1$事件信息,'名字')
b<-as.data.frame(matrix(unlist(a),byrow=TRUE,ncol=2))
b$V3<-substring(b$V2,2)
b<-data.frame(b[,3])
c<-cbind(a1,b)
names(c)[9]<-'MID'
a2$MID<-NA
cc<-rbind(a2,c)
cc<-cc[,c(8,9)]
cc$MID<-stringr::str_trim(cc$MID,'both')
SB_factor<-merge(SB_factor,cc,by='num',all.x=T)
SB_factor<-SB_factor[,-1]
SB_factor$MID<-paste('M',SB_factor$MID,sep='')
SB_factor<-merge(SB_factor,MCORID,by.x='MID',by.y='sire',all.x=T)
SB_factor[is.na(SB_factor$corid),9]<-SB_factor[is.na(SB_factor$corid),1]
SB_factor$cowp<-paste(SB_factor$FID,SB_factor$胎次,sep='')
SB_factor<-SB_factor[!duplicated(SB_factor$cowp),-10]
SB_factor<-SB_factor[,-c(1,2)]
SB_factor$mid1<-gsub('（性','',SB_factor$corid)
SB_factor$mid1<-gsub('（性控）','',SB_factor$mid1)
SB_factor$mid1<-gsub('ET','',SB_factor$mid1)
SB_factor$mid1<-gsub('hc','',SB_factor$mid1)
SB_factor$mid1<-gsub('后测','',SB_factor$mid1)
SB_factor$mid1<-gsub('性控','',SB_factor$mid1)
SB_factor$mid1<-gsub('性','',SB_factor$mid1)
SB_factor$mid1<-gsub('种公','',SB_factor$mid1)
SB_factor$mid1<-gsub('种子','',SB_factor$mid1)
SB_factor[which(SB_factor$mid1=='M'),8]<-'M0'
SB_factor$mid1<-gsub('ho','HO',SB_factor$mid1)
SB_factor$mid1<-gsub('h0','HO',SB_factor$mid1)
SB_factor$mid1<-gsub('H0','HO',SB_factor$mid1)
SB_factor<-SB_factor[,-7]
ped<-ped_all[,c(1,4)]
SB_male<-merge(SB_factor,ped,by.x='mid1',by.y='id',all.x=T)
SB_male[is.na(SB_male$code),8]<-999999
SB_factor<-SB_male[,-1]
names(SB_factor)[7]<-'MID'
rm(a,b,a1,cc,c,a2,SB_deleted,SB_deleted_1,SB_deleted_2,SB_male)

#对CE提取
CE_deleted_1<-CE_deleted[is.na(CE_deleted$事件信息),]
CE_deleted_2<-CE_deleted[complete.cases(CE_deleted$事件信息),]
a<-strsplit(CE_deleted_2$事件信息,'; ;')
b<-as.data.frame(t(data.frame(a[1:length(a)])))
row.names(b)<-NULL
CE_factor<-cbind(CE_deleted_2,b)
CE_factor$V2<-NA
CE_factor[which(grepl('-正常',CE_factor$V1)|grepl('-出售',CE_factor$V1)==T),13]<-2
CE_factor[which(grepl('G',CE_factor$V1)==T),13]<-1
CE_factor[which(nchar(as.character(CE_factor$V1))>12),13]<-3
CE_factor[is.na(CE_factor$V2),13]<-999999
CE_factor<-CE_factor[,-12]
names(CE_factor)[12]<-'SEX'
rm(a,b)
CE_factor<-CE_factor[,-c(1,4,6,7,10)]
CE_deleted_1<-CE_deleted_1[,c(2,3,5,8,9,11,6)]
CE_factor<-rbind(CE_factor,CE_deleted_1)
CE_factor$num<-1:length(CE_factor$FID)
a1<-CE_factor[which(grepl('名字',CE_factor$事件信息)==T),]
a2<-CE_factor[which(grepl('名字',CE_factor$事件信息)==F),]
a<-strsplit(a1$事件信息,'名字')
b<-as.data.frame(matrix(unlist(a),byrow=TRUE,ncol=2))
b$V3<-substring(b$V2,2)
b<-data.frame(b[,3])
c<-cbind(a1,b)
names(c)[9]<-'MID'
a2$MID<-NA
cc<-rbind(a2,c)
cc<-cc[,c(8,9)]
cc$MID<-stringr::str_trim(cc$MID,'both')
CE_factor<-merge(CE_factor,cc,by='num',all.x=T)
CE_factor<-CE_factor[,-1]
CE_factor$MID<-paste('M',CE_factor$MID,sep='')
CE_factor<-merge(CE_factor,MCORID,by.x='MID',by.y='sire',all.x=T)
CE_factor[is.na(CE_factor$corid),9]<-CE_factor[is.na(CE_factor$corid),1]
CE_factor$cowp<-paste(CE_factor$FID,CE_factor$胎次,sep='')
CE_factor<-CE_factor[!duplicated(CE_factor$cowp),-10]
CE_factor<-CE_factor[,-c(1,2)]
CE_factor$mid1<-gsub('（性','',CE_factor$corid)
CE_factor$mid1<-gsub('（性控）','',CE_factor$mid1)
CE_factor$mid1<-gsub('ET','',CE_factor$mid1)
CE_factor$mid1<-gsub('hc','',CE_factor$mid1)
CE_factor$mid1<-gsub('后测','',CE_factor$mid1)
CE_factor$mid1<-gsub('性控','',CE_factor$mid1)
CE_factor$mid1<-gsub('性','',CE_factor$mid1)
CE_factor$mid1<-gsub('种公','',CE_factor$mid1)
CE_factor$mid1<-gsub('种子','',CE_factor$mid1)
CE_factor[which(CE_factor$mid1=='M'),8]<-'M0'
CE_factor$mid1<-gsub('ho','HO',CE_factor$mid1)
CE_factor$mid1<-gsub('h0','HO',CE_factor$mid1)
CE_factor$mid1<-gsub('H0','HO',CE_factor$mid1)
CE_factor<-CE_factor[,-7]
ped<-ped_all[,c(1,4)]
CE_male<-merge(CE_factor,ped,by.x='mid1',by.y='id',all.x=T)
CE_male[is.na(CE_male$code),8]<-999999
CE_factor<-CE_male[,-1]
names(CE_factor)[7]<-'MID'
rm(a,b,a1,cc,c,a2,CE_deleted,CE_deleted_1,CE_deleted_2,CE_male)


#对各性状模型效应进行提取
#AFS=HYB + YMB + ST + A + E
st<-read.csv('st2008.csv',stringsAsFactors = F)
AFS_factor<-merge(AFS_controled,st,by='配种员',all.x=T)
AFS_factor[is.na(AFS_factor$ST),18]<-999999
AFS_factor<-merge(AFS_factor,ped_all,by.x='FID',by.y='id',all.x=T)
AFS_factor$Bir_date<-as.Date(AFS_factor$Bir_date)
AFS_factor$year<-lubridate::year(AFS_factor$Bir_date)
AFS_factor$mon<-lubridate::month(AFS_factor$Bir_date)
AFS_factor$HYB<-paste(AFS_factor$herdrenum,AFS_factor$year,sep='')
AFS_factor$YMB<-paste(AFS_factor$year,AFS_factor$mon,sep='')
AFS_factor[which(grepl('NA',AFS_factor$HYB)==T),27]<-999999
AFS_factor[which(grepl('NA',AFS_factor$YMB)==T),28]<-999999
AFS_factor<-AFS_factor[complete.cases(AFS_factor$code),]
AFSdata<-AFS_factor[,c(27,28,18,21,17)]
AFSdata$HYB<-as.numeric(AFSdata$HYB)
AFSdata$YMB<-as.numeric(AFSdata$YMB)
AFSdata$AFS<-as.numeric(AFSdata$AFS)
rm(AFS_controled,AFS_factor)

#AFC= HYB + YMB + ST + SC + A + E ,性控精液1为性控，2为非性控
#性控精液在新数据中的提取
a<-shujing_first[,c(12,3)]
a<-a[!duplicated(a$FID),]
sj1<-read.csv('D:\\数据库\\北京\\1908\\农大导出20190808\\繁殖\\配种数据.csv',stringsAsFactors = F,encoding = 'gbk')
sj2<-read.csv('D:\\数据库\\北京\\1912\\农大导出2019\\农大导出2019\\配种数据2019.csv',stringsAsFactors = F)
sj3<-read.csv('D:\\数据库\\北京\\2008\\繁殖数据导出2020年1-6月\\新建文件夹\\配种数据.csv',stringsAsFactors = F,encoding = 'gbk')
names(sj2)[10]<-'配种类型'
names(sj3)[10]<-'配种类型'
sj19<-rbind(sj1,sj2,sj3)
sj19<-sj19[-which(grepl('娟姗',sj19$牛场名称)==T),]
sj19[,3]<-stringr::str_trim(sj19[,3],'both')
sj19[,1]<-stringr::str_trim(sj19[,1],'both')
sj19[,12]<-substr(sj19[,3],1,nchar(sj19[,1]))
for (i in 1:57){
  sj19[which(grepl(herdnum[i,2],sj19$牛场名称)==T),13]<-herdnum[i,1]
}
sj19[which(sj19$牛场名称=='长四牛场'&year(sj19$配种日期)==2019),3]<-paste(substr(sj19[which(sj19$牛场名称=='长四牛场'&year(sj19$配种日期)==2019),3],1,3),'0',substr(sj19[which(sj19$牛场名称=='长四牛场'&year(sj19$配种日期)==2019),3],4,nchar(sj19[which(sj19$牛场名称=='长四牛场'&year(sj19$配种日期)==2019),3])),sep='')
sj19[which(sj19$牛场名称=='白城公司'&year(sj19$配种日期)==2020),3]<-paste(substr(sj19[which(sj19$牛场名称=='白城公司'&year(sj19$配种日期)==2020),3],1,4),substr(sj19[which(sj19$牛场名称=='白城公司'&year(sj19$配种日期)==2020),3],6,nchar(sj19[which(sj19$牛场名称=='白城公司'&year(sj19$配种日期)==2020),3])),sep='')
sj19[which(sj19$牛场编号==sj19$V12),14]<-substr(sj19[which(sj19$牛场编号==sj19$V12),3],nchar(sj19[which(sj19$牛场编号==sj19$V12),1])+1,nchar(sj19[which(sj19$牛场编号==sj19$V12),3]))
sj19[,15]<-stringr::str_pad(sj19[,14],6,'left',pad='0')
sj19[which(nchar(sj19[,15])==7),15]<-substr(sj19[which(nchar(sj19[,15])==7),15],2,7)
sj19[,16]<-paste('F',sj19$V13,sj19[,15],sep='')
sj19[is.na(sj19$V14),16]<-paste('F',sj19[is.na(sj19$V14),3],sep='')
sj19[which(nchar(sj19$牛号)<7),16]<-paste('F',sj19[which(nchar(sj19$牛号)<7),1],stringr::str_pad(sj19[which(nchar(sj19$牛号)<7),3],6,'left',pad='0'),sep='')
sj19[is.na(sj19$V15),15]<-substr(sj19[is.na(sj19$V15),3],7,nchar(sj19[is.na(sj19$V15),3]))
sj19[,15]<-stringr::str_pad(sj19[,15],6,'left',pad='0')
sj19[,16]<-paste('F',sj19$V13,sj19[,15],sep='')
sj19[which(grepl('XP',sj19$牛号)|grepl('XLJ',sj19$牛号)|grepl('HL',sj19$牛号)|grepl('BH',sj19$牛号)==T),16]<-paste('F',sj19[which(grepl('XP',sj19$牛号)|grepl('XLJ',sj19$牛号)|grepl('HL',sj19$牛号)|grepl('BH',sj19$牛号)==T),1],sj19[which(grepl('XP',sj19$牛号)|grepl('XLJ',sj19$牛号)|grepl('HL',sj19$牛号)|grepl('BH',sj19$牛号)==T),3],sep='')
sj19<-sj19[,-c(12,14,15)]
names(sj19)[13]<-'FID'
sj19$aa<-paste(sj19$FID,as.numeric(as.Date(sj19$配种日期)),sep='')
sj19<-sj19[!duplicated(sj19$aa),]
sj19<-sj19[,-14]
b<-sj19[,c(13,5,9)]
b[which(grepl('性控',b$冻精类型)),4]<-1
b[is.na(b$V4),4]<-2
b<-b[,-3]
names(b)[2]<-'sjdate'
b%<>%
  group_by(FID)%>%
  filter(sjdate %in% min(sjdate))%>%
  ungroup()
b<-b[!duplicated(b$FID),]
c<-merge(a,b,by=c('FID','sjdate'),all.x=T)
c<-c[complete.cases(c$V4),]
c<-c[,-2]
names(c)[2]<-'SC'

AFC_factor<-merge(AFC_controled,ped_all,by.x='FID',by.y='id',all.x=T)
AFC_factor<-AFC_factor[complete.cases(AFC_factor$code),]
AFC_factor[which(grepl('性',AFC_factor$事件信息)|grepl('x',AFC_factor$事件信息)==T),27]<-1
AFC_factor<-merge(AFC_factor,c,by='FID',all.x=T)
AFC_factor[!is.na(AFC_factor$SC),27]<-AFC_factor[!is.na(AFC_factor$SC),28]
AFC_factor<-AFC_factor[,-c(13:15,28)]
names(AFC_factor)[24]<-'SC'
AFC_factor[is.na(AFC_factor$SC),24]<-2
AFC_AFS<-merge(AFC_factor,AFSdata,by='code',all.x=T)
AFC_AFS$Bir_date<-as.Date(AFC_AFS$Bir_date)
AFC_AFS$year<-lubridate::year(AFC_AFS$Bir_date)
AFC_AFS$mon<-lubridate::month(AFC_AFS$Bir_date)
AFC_AFS$HYB<-paste(AFC_AFS$herdrenum,AFC_AFS$year,sep='')
AFC_AFS$YMB<-paste(AFC_AFS$year,AFC_AFS$mon,sep='')
AFC_AFS[which(grepl('NA',AFC_AFS$HYB)==T),25]<-999999
AFC_AFS[which(grepl('NA',AFC_AFS$YMB)==T),26]<-999999
AFC_AFS[is.na(AFC_AFS$ST),27]<-999999
AFCdata<-AFC_AFS[,c(25,26,27,24,1,18)]
rm(AFC_controled,AFC_factor,AFC_AFS)

#提取MF
MF<-AFSdata[,c(4,5)]
MF[which(MF$AFS %in% seq(270,439)),3]<-1
MF[which(MF$AFS %in% seq(440,469)),3]<-2
MF[which(MF$AFS %in% seq(470,499)),3]<-3
MF[which(MF$AFS %in% seq(500,529)),3]<-4
MF[which(MF$AFS %in% seq(530,900)),3]<-5
MF<-MF[,-2]
names(MF)[2]<-'MF'


#IFL_H = HYI + YMI + ST + SC + MF + A + E
#IFL_C = HYI + YMI + ST + SC + MF + P + PE + A + E
IFL_factor<-merge(IFL_controled,st,by.x='配种员.x',by.y='配种员',all.x=T)
IFL_factor[is.na(IFL_factor$ST),18]<-999999
IFL_factor[which(grepl('性',IFL_factor$事件信息)|grepl('x',IFL_factor$事件信息)==T),19]<-1
IFL_factor[is.na(IFL_factor$V19),19]<-2
names(IFL_factor)[19]<-'SC'
IFL_factor<-merge(IFL_factor,ped_all,by.x='FID.x',by.y = 'id',all.x=T)
IFL_factor<-IFL_factor[complete.cases(IFL_factor$code),]
IFL_factor<-IFL_factor[,c(16,15,18,19,9,22,17)]
IFL_factor<-merge(IFL_factor,MF,by='code',all.x=T)
IFL_factor[is.na(IFL_factor$MF),8]<-999999
IFL_Hdata<-IFL_factor[which(IFL_factor$胎次.x==0),c(2,3,4,5,8,1,7)]
IFL_Cdata<-IFL_factor[which(IFL_factor$胎次.x!=0),c(2,3,4,5,8,6,1,7)]
rm(IFL_factor,IFL_controled)

#ICF = HYC + YMC + ST + MF + P + PE + A + E
ICF_adjust<-ICF_adjust[-which(ICF_adjust$胎次==0),]
ICF_factor<-merge(ICF_adjust,st,by='配种员',all.x=T)
ICF_factor<-ICF_factor[,-c(8:10)]
ICF_factor[is.na(ICF_factor$ST),13]<-999999
ICF_factor<-merge(ICF_factor,ped_all,by.x = 'FID',by.y = 'id',all.x=T)
ICF_factor<-ICF_factor[complete.cases(ICF_factor$code),]
ICF_factor<-merge(ICF_factor,MF,by='code',all.x=T)
ICF_factor[is.na(ICF_factor$MF),20]<-999999
ICFdata<-ICF_factor[,c(9,10,14,20,5,1,13)]
rm(ICF_adjust,ICF_factor)

#CE_H = HYC + YMC + MF + Sex + A + E
#CE_C = HYC + YMC + MF + Sex + P + A + E
CE_factor<-merge(CE_factor,ped_all,by.x='FID',by.y='id',all.x=T)
CE_factor<-CE_factor[complete.cases(CE_factor$code),]
CE_factor<-merge(CE_factor,MF,by='code',all.x=T)
CE_factor[is.na(CE_factor$MF),14]<-999999
CE_factor<-CE_factor[-which(CE_factor$胎次==0),]
CE_Hdata<-CE_factor[which(CE_factor$胎次==1),c(4,5,14,7,1,8,6)]
CE_Cdata<-CE_factor[which(CE_factor$胎次!=1),c(4,5,14,7,3,1,8,6)]
rm(CE_factor)

#SB_H = HYC + YMC + MF + Sex + A + E
#SB_C = HYC + YMC + MF + Sex + P + A + E
SB_factor<-merge(SB_factor,ped_all,by.x='FID',by.y='id',all.x=T)
SB_factor<-SB_factor[complete.cases(SB_factor$code),]
SB_factor<-merge(SB_factor,MF,by='code',all.x=T)
SB_factor[is.na(SB_factor$MF),14]<-999999
SB_factor<-SB_factor[-which(SB_factor$胎次==0),]
SB_Hdata<-SB_factor[which(SB_factor$胎次==1),c(4,5,14,7,1,8,6)]
SB_Cdata<-SB_factor[which(SB_factor$胎次!=1),c(4,5,14,7,3,1,8,6)]
rm(SB_factor)


#转换数据格式
AFCdata%<>%dplyr::mutate_at(c('HYB','YMB','AFC'),~as.numeric(.x))
ICFdata%<>%dplyr::mutate_at(c('HYC','YMC','ICF'),~as.numeric(.x))
CE_Cdata%<>%dplyr::mutate_at(c('HYC','YMC','CE','SEX'),~as.numeric(.x))
CE_Hdata%<>%dplyr::mutate_at(c('HYC','YMC','CE','SEX'),~as.numeric(.x))
IFL_Cdata%<>%dplyr::mutate_at(c('HYI.x','YMI.x','IFL'),~as.numeric(.x))
IFL_Hdata%<>%dplyr::mutate_at(c('HYI.x','YMI.x','IFL'),~as.numeric(.x))
SB_Cdata%<>%dplyr::mutate_at(c('HYC','YMC','SB','SEX'),~as.numeric(.x))
SB_Hdata%<>%dplyr::mutate_at(c('HYC','YMC','SB','SEX'),~as.numeric(.x))

#保存数据
tnames<-c('AFC','AFS','CE_C','CE_H','SB_C','SB_H','ICF','IFL_C','IFL_H')
for (i in tnames){
  write.table(eval(parse(text=paste(i,'data',sep=''))),paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'data',sep=''),col.names = F,row.names = F)
}

# for (i in tnames){
#   b<-get(paste(i,'data',sep=''))
#   jpeg(file=paste('D:\\MASTER\\遗传评估\\201912\\性状统计\\',i,'.jpeg',sep=''))
#   print(ggplot(b,mapping = aes(x=factor(b[,ncol(b)])))+geom_bar(stat='count')+
#           xlab(i)+
#           ylab('数据量')+
#           ggtitle(paste(i,'数据量统计',sep='')))
#   dev.off()
# }

#####运行DMUAI####
# setwd('D:\\MASTER\\遗传评估\\201912\\DMU')
# for (i in tnames){
#   system(paste('run_dmuai ',i,sep = ''))
# }

#####只包含单性状计算遗传力和重复力、SE#####
tnames<-c('AFC','AFS','ICF','IFL_C','IFL_H')
for (i in tnames){
  assign(i,read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.PAROUT_STD',sep=''),col.names = c('V1','V2','V3','V4'),fill=NA))
  a<-get(i)
  if (a[1,1] == 2){
    var_k<-a[2,2]
    var_e<-a[3,2]
    var_p<-var_k+var_e
    var_var_k<-a[4,4]
    var_var_e<-a[6,4]
    cov_var_ke<-a[5,4]
    var_var_p<-var_var_k+var_var_e+2*cov_var_ke
    cov_var_kp<-var_var_k+cov_var_ke
    heritability<- var_k/var_p
    SE<-sqrt(((var_k/var_p)^2)*(var_var_k/(var_k^2)+var_var_p/(var_p^2)-2*(cov_var_kp/(var_k*var_p))))
    assign(paste(i,'_result',sep=''),data.frame(t(c(heritability,SE,NA,NA))))
    print(paste(i,round(var_k,4),sep=' '))
    rm(var_k,var_e,var_p,var_var_e,var_var_k,var_var_p,cov_var_ke,cov_var_kp,heritability,SE)
  } else {
    if (a[1,1] == 3){
      var_k<-a[2,2]
      var_pe<-a[3,2]
      var_e<-a[4,2]
      var_re<-var_k+var_pe
      var_p<-var_e+var_re
      var_var_k<-a[5,4]
      var_var_pe<-a[7,4]
      var_var_e<-a[10,4]
      cov_var_kpe<-a[6,4]
      cov_var_ke<-a[8,4]
      cov_var_pee<-a[9,4]
      var_var_re<-var_var_k+var_var_pe+2*cov_var_kpe
      cov_var_ree<-cov_var_ke+cov_var_pee
      var_var_p<-var_var_k+var_var_pe+var_var_e+2*cov_var_kpe+2*cov_var_ke+2*cov_var_pee
      cov_var_kp<-var_var_k+cov_var_kpe+cov_var_ke
      cov_var_rep<-var_var_re+cov_var_ree
      heritability <- var_k/var_p
      print(paste(i,round(var_k,4),sep=' '))
      SE_heritability <- sqrt(((var_k/var_p)^2)*(var_var_k/(var_k^2)+var_var_p/(var_p^2)-2*(cov_var_kp/(var_k*var_p))))
      repeatability<- var_re/var_p
      SE_repeatability<-sqrt(((var_re/var_p)^2)*(var_var_re/(var_re^2)+var_var_p/(var_p^2)-2*(cov_var_rep/(var_re*var_p))))
      assign(paste(i,'_result',sep=''),data.frame(t(c(heritability,SE_heritability,repeatability,SE_repeatability))))
    }
  }
}

total<-as.data.frame(matrix(NA,ncol = 4,nrow = 5))  
for(i in 1:5){
  total[i,]<-get(paste(tnames[i],'_result',sep=''))[1,]
}
total<-cbind(total,as.data.frame(tnames))
names(total)<-c('h2','h2_SE','re','re_SE','trait')
total<-total[,c(5,1:4)]
total$H2<-paste(round(total$h2,3),'±',round(total$h2_SE,3),sep='')
total$RE<-paste(round(total$re,3),'±',round(total$re_SE,3),sep='')
write.csv(total,'D:\\MASTER\\遗传评估\\202008\\DMU\\result1.csv',row.names = F)


#####>>>>>>>>>>>>>>>>>>>>>>>>>>产犊性状>>>>>>>>>>>>>>>>>>>>>>#####
#####添加公牛加性效应#####
#参数计算
name<-c('CE_H','SB_H','CE_C','SB_C')
a<-as.data.frame(matrix(NA,ncol = 9,nrow = 4))  
a[,1]<-name
names(a)<-c('trait','fh2','fh2se','fre','frese','mh2','mh2se','mre','mrese')
#没有包括cov
# for (i in name){
#   df<-read.table(paste('D:\\MASTER\\遗传评估\\201912\\DMU\\',i,'.PAROUT_STD',sep=''),col.names = c('V1','V2','V3','V4'),fill=NA)
#   if (i=='CE_H'|i=='SB_H'){
#     var_a_f<-df[2,2]
#     var_a_m<-df[4,2]
#     var_pe_m<-df[5,2]
#     var_e<-df[6,2]
#     var_re_m<-var_a_m+var_pe_m
#     var_p<-var_a_f+var_a_m+var_pe_m+var_e
#     var_var_a_f<-df[7,4]
#     var_var_a_m<-df[12,4]
#     var_var_pe_m<-df[16,4]
#     var_var_e<-df[21,4]
#     cov_af_af<-var_var_a_f
#     cov_am_am<-var_var_a_m
#     cov_pem_pem<-var_var_pe_m
#     cov_e_e<-var_var_e
#     cov_af_am<-df[10,4]
#     cov_af_pem<-df[13,4]
#     cov_af_e<-df[17,4]
#     cov_am_pem<-df[15,4]
#     cov_am_e<-df[19,4]
#     cov_pem_e<-df[20,4]
#     cov_af_rem<-cov_af_am+cov_af_pem
#     cov_am_rem<-cov_am_am+cov_am_pem
#     cov_pem_rem<-cov_pem_pem+cov_am_pem
#     cov_rem_rem<-cov_am_rem+cov_pem_rem
#     cov_rem_e<-cov_am_e+cov_pem_e
#     var_var_rem<-cov_rem_rem
#     cov_af_p<-cov_af_af+cov_af_rem+cov_af_e
#     cov_am_p<-cov_af_am+cov_am_rem+cov_am_e
#     cov_pem_p<-cov_af_pem+cov_pem_rem+cov_pem_e
#     cov_rem_p<-cov_af_rem+cov_rem_rem+cov_rem_e
#     cov_e_p<-cov_af_e+cov_rem_e+cov_e_e
#     cov_p_p<-cov_af_p+cov_rem_p+cov_e_p
#     var_var_p<-cov_p_p
#     fh<-var_a_f/var_p
#     mh<-var_a_m/var_p
#     mre<-var_re_m/var_p
#     fhse<-sqrt(((var_a_f/var_p)^2)*(var_var_a_f/(var_a_f^2)+var_var_p/(var_p^2)-2*cov_af_p/(var_a_f*var_p)))
#     mhse<-sqrt(((var_a_m/var_p)^2)*(var_var_a_m/(var_a_m^2)+var_var_p/(var_p^2)-2*cov_am_p/(var_a_m*var_p)))
#     mrese<-sqrt(((var_re_m/var_p)^2)*(var_var_rem/(var_re_m^2)+var_var_p/(var_p^2)-2*cov_rem_p/(var_re_m*var_p)))
#     b<-c(round(fh,4),round(fhse,4),NA,NA,round(mh,4),round(mhse,4),round(mre,4),round(mrese,4))
#     a[which(a$trait==i),2:9]<-b
#   } else {
#     var_a_f<-df[2,2]
#     var_a_m<-df[4,2]
#     var_pe_f<-df[5,2]
#     var_pe_m<-df[6,2]
#     var_e<-df[7,2]
#     var_re_m<-var_a_m+var_pe_m
#     var_re_f<-var_a_f+var_pe_f
#     var_p<-var_a_f+var_a_m+var_pe_m+var_pe_f+var_e
#     var_var_a_f<-df[8,4]
#     var_var_a_m<-df[13,4]
#     var_var_pe_f<-df[17,4]
#     var_var_pe_m<-df[22,4]
#     var_var_e<-df[28,4]
#     cov_af_af<-var_var_a_f
#     cov_am_am<-var_var_a_m
#     cov_pem_pem<-var_var_pe_m
#     cov_pef_pef<-var_var_pe_f
#     cov_e_e<-var_var_e
#     cov_af_am<-df[11,4]
#     cov_af_pem<-df[18,4]
#     cov_af_pef<-df[14,4]
#     cov_af_e<-df[23,4]
#     cov_am_pem<-df[20,4]
#     cov_am_pef<-df[16,4]
#     cov_am_e<-df[25,4]
#     cov_pem_e<-df[27,4]
#     cov_pem_pef<-df[21,4]
#     cov_pef_e<-df[26,4]
#     cov_af_rem<-cov_af_am+cov_af_pem
#     cov_am_rem<-cov_am_am+cov_am_pem
#     cov_pem_rem<-cov_pem_pem+cov_am_pem
#     cov_pef_rem<-cov_am_pef+cov_pem_pef
#     cov_rem_rem<-cov_am_rem+cov_pem_rem
#     cov_rem_e<-cov_am_e+cov_pem_e
#     cov_af_ref<-cov_af_af+cov_af_pef
#     cov_am_ref<-cov_af_am+cov_am_pef
#     cov_pem_ref<-cov_pem_pef+cov_am_pef
#     cov_pef_ref<-cov_af_pef+cov_pef_pef
#     cov_ref_ref<-cov_af_ref+cov_pef_ref
#     cov_ref_e<-cov_af_e+cov_pef_e
#     cov_ref_rem<-cov_pef_rem+cov_af_rem
#     var_var_rem<-cov_rem_rem
#     var_var_ref<-cov_ref_ref
#     cov_af_p<-cov_af_rem+cov_af_ref+cov_af_e
#     cov_am_p<-cov_am_ref+cov_am_rem+cov_am_e
#     cov_pem_p<-cov_pem_ref+cov_pem_rem+cov_pem_e
#     cov_rem_p<-cov_rem_rem+cov_ref_rem+cov_rem_e
#     cov_pef_p<-cov_pef_ref+cov_pef_rem+cov_pef_e
#     cov_ref_p<-cov_ref_ref+cov_ref_rem+cov_ref_e
#     cov_e_p<-cov_ref_e+cov_rem_e+cov_e_e
#     cov_p_p<-cov_ref_p+cov_rem_p+cov_e_p
#     var_var_p<-cov_p_p
#     fh<-var_a_f/var_p
#     mh<-var_a_m/var_p
#     mre<-var_re_m/var_p
#     fre<-var_re_f/var_p
#     fhse<-sqrt(((var_a_f/var_p)^2)*(var_var_a_f/(var_a_f^2)+var_var_p/(var_p^2)-2*cov_af_p/(var_a_f*var_p)))
#     mhse<-sqrt(((var_a_m/var_p)^2)*(var_var_a_m/(var_a_m^2)+var_var_p/(var_p^2)-2*cov_am_p/(var_a_m*var_p)))
#     mrese<-sqrt(((var_re_m/var_p)^2)*(var_var_rem/(var_re_m^2)+var_var_p/(var_p^2)-2*cov_rem_p/(var_re_m*var_p)))
#     frese<-sqrt(((var_re_f/var_p)^2)*(var_var_ref/(var_re_f^2)+var_var_p/(var_p^2)-2*cov_ref_p/(var_re_f*var_p)))
#     b<-c(round(fh,4),round(fhse,4),round(fre,4),round(frese,4),round(mh,4),round(mhse,4),round(mre,4),round(mrese,4))
#     a[which(a$trait==i),2:9]<-b
#   }
# }
for (i in name){
  df<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.PAROUT_STD',sep=''),col.names = c('V1','V2','V3','V4'),fill=NA)
  if (i=='CE_H'|i=='SB_H'){
    var_a_f<-df[2,2]
    cov_f_m<-df[3,2]
    var_a_m<-df[4,2]
    var_pe_m<-df[5,2]
    var_e<-df[6,2]
    var_re_m<-var_a_m+var_pe_m
    var_p<-var_a_f+var_a_m+var_pe_m+var_e+2*cov_f_m
    var_var_a_f<-df[7,4]
    var_var_a_m<-df[12,4]
    var_var_pe_m<-df[16,4]
    var_var_e<-df[21,4]
    cov_af_af<-var_var_a_f
    cov_am_am<-var_var_a_m
    cov_pem_pem<-var_var_pe_m
    cov_e_e<-var_var_e
    cov_af_am<-df[10,4]
    cov_af_pem<-df[13,4]
    cov_af_e<-df[17,4]
    cov_am_pem<-df[15,4]
    cov_am_e<-df[19,4]
    cov_pem_e<-df[20,4]
    cov_af_rem<-cov_af_am+cov_af_pem
    cov_am_rem<-cov_am_am+cov_am_pem
    cov_pem_rem<-cov_pem_pem+cov_am_pem
    cov_rem_rem<-cov_am_rem+cov_pem_rem
    cov_rem_e<-cov_am_e+cov_pem_e
    var_var_rem<-cov_rem_rem
    cov_af_p<-cov_af_af+cov_af_rem+cov_af_e
    cov_am_p<-cov_af_am+cov_am_rem+cov_am_e
    cov_pem_p<-cov_af_pem+cov_pem_rem+cov_pem_e
    cov_rem_p<-cov_af_rem+cov_rem_rem+cov_rem_e
    cov_e_p<-cov_af_e+cov_rem_e+cov_e_e
    cov_p_p<-cov_af_p+cov_rem_p+cov_e_p
    var_var_p<-cov_p_p
    fh<-var_a_f/var_p
    mh<-var_a_m/var_p
    mre<-var_re_m/var_p
    fhse<-sqrt(((var_a_f/var_p)^2)*(var_var_a_f/(var_a_f^2)+var_var_p/(var_p^2)-2*cov_af_p/(var_a_f*var_p)))
    mhse<-sqrt(((var_a_m/var_p)^2)*(var_var_a_m/(var_a_m^2)+var_var_p/(var_p^2)-2*cov_am_p/(var_a_m*var_p)))
    mrese<-sqrt(((var_re_m/var_p)^2)*(var_var_rem/(var_re_m^2)+var_var_p/(var_p^2)-2*cov_rem_p/(var_re_m*var_p)))
    b<-c(round(fh,4),round(fhse,4),NA,NA,round(mh,4),round(mhse,4),round(mre,4),round(mrese,4))
    a[which(a$trait==i),2:9]<-b
  } else {
    var_a_f<-df[2,2]
    var_a_m<-df[4,2]
    cov_f_m<-df[3,2]
    var_pe_f<-df[5,2]
    var_pe_m<-df[6,2]
    var_e<-df[7,2]
    var_re_m<-var_a_m+var_pe_m
    var_re_f<-var_a_f+var_pe_f
    var_p<-var_a_f+var_a_m+var_pe_m+var_pe_f+var_e
    var_var_a_f<-df[8,4]
    var_var_a_m<-df[13,4]
    var_var_pe_f<-df[17,4]
    var_var_pe_m<-df[22,4]
    var_var_e<-df[28,4]
    cov_af_af<-var_var_a_f
    cov_am_am<-var_var_a_m
    cov_pem_pem<-var_var_pe_m
    cov_pef_pef<-var_var_pe_f
    cov_e_e<-var_var_e
    cov_af_am<-df[11,4]
    cov_af_pem<-df[18,4]
    cov_af_pef<-df[14,4]
    cov_af_e<-df[23,4]
    cov_am_pem<-df[20,4]
    cov_am_pef<-df[16,4]
    cov_am_e<-df[25,4]
    cov_pem_e<-df[27,4]
    cov_pem_pef<-df[21,4]
    cov_pef_e<-df[26,4]
    cov_af_rem<-cov_af_am+cov_af_pem
    cov_am_rem<-cov_am_am+cov_am_pem
    cov_pem_rem<-cov_pem_pem+cov_am_pem
    cov_pef_rem<-cov_am_pef+cov_pem_pef
    cov_rem_rem<-cov_am_rem+cov_pem_rem
    cov_rem_e<-cov_am_e+cov_pem_e
    cov_af_ref<-cov_af_af+cov_af_pef
    cov_am_ref<-cov_af_am+cov_am_pef
    cov_pem_ref<-cov_pem_pef+cov_am_pef
    cov_pef_ref<-cov_af_pef+cov_pef_pef
    cov_ref_ref<-cov_af_ref+cov_pef_ref
    cov_ref_e<-cov_af_e+cov_pef_e
    cov_ref_rem<-cov_pef_rem+cov_af_rem
    var_var_rem<-cov_rem_rem
    var_var_ref<-cov_ref_ref
    cov_af_p<-cov_af_rem+cov_af_ref+cov_af_e
    cov_am_p<-cov_am_ref+cov_am_rem+cov_am_e
    cov_pem_p<-cov_pem_ref+cov_pem_rem+cov_pem_e
    cov_rem_p<-cov_rem_rem+cov_ref_rem+cov_rem_e
    cov_pef_p<-cov_pef_ref+cov_pef_rem+cov_pef_e
    cov_ref_p<-cov_ref_ref+cov_ref_rem+cov_ref_e
    cov_e_p<-cov_ref_e+cov_rem_e+cov_e_e
    cov_p_p<-cov_ref_p+cov_rem_p+cov_e_p
    var_var_p<-cov_p_p
    fh<-var_a_f/var_p
    mh<-var_a_m/var_p
    mre<-var_re_m/var_p
    fre<-var_re_f/var_p
    fhse<-sqrt(((var_a_f/var_p)^2)*(var_var_a_f/(var_a_f^2)+var_var_p/(var_p^2)-2*cov_af_p/(var_a_f*var_p)))
    mhse<-sqrt(((var_a_m/var_p)^2)*(var_var_a_m/(var_a_m^2)+var_var_p/(var_p^2)-2*cov_am_p/(var_a_m*var_p)))
    mrese<-sqrt(((var_re_m/var_p)^2)*(var_var_rem/(var_re_m^2)+var_var_p/(var_p^2)-2*cov_rem_p/(var_re_m*var_p)))
    frese<-sqrt(((var_re_f/var_p)^2)*(var_var_ref/(var_re_f^2)+var_var_p/(var_p^2)-2*cov_ref_p/(var_re_f*var_p)))
    b<-c(round(fh,4),round(fhse,4),round(fre,4),round(frese,4),round(mh,4),round(mhse,4),round(mre,4),round(mrese,4))
    a[which(a$trait==i),2:9]<-b
  }
}
write.csv(a,'D:\\MASTER\\遗传评估\\202008\\DMU\\result2.csv',row.names=F)

######育种值提取#####
name<-c('CE_H','CE_C','SB_H','SB_C')
a<-data.frame(name)
a$af<-NA
a$am<-NA
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors = F)
ped_all$Bir_date<-as.Date(ped_all$Bir_date,format='%Y/%m/%d')
ped_all<-ped_all[complete.cases(ped_all$Bir_date),]
ped_all[which(substr(ped_all$id,1,1)=='M'),8]<-1
ped_all[is.na(ped_all$V8),8]<-2
names(ped_all)[8]<-'aa'
  
for (i in name){
  df<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.PAROUT_STD',sep=''),col.names = c('V1','V2','V3','V4'),fill=NA)
  all<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.SOL',sep=''))
  a[which(a$name==i),2]<-df[2,2]
  a[which(a$name==i),3]<-df[4,2]
  #>>>>>>>>>>>>>>>>>>>>>>>>母系育种值>>>>>>>>>>>>>>>>>>>>>>>>>>
  mx<-all[which(all[,1]==4&all[,3]==1),]
  mx$REL<-1-((mx$V9)^2)/a[which(a$name==i),2]
  mx<-mx[which(mx$REL>0&mx$REL!=1),]
  mx$AC<-sqrt(mx$REL)
  b<-merge(mx,ped_all,by.x='V5',by.y='code',all.x=T)
  b<-b[,-c(2:5,13:14)]
  c<-b[which(b$aa==1),]
  c<-c[,-12]
  assign(paste('mx_',i,'_male',sep=''),c)
  c<-c[,c(1,8,4:7,11)]
  names(c)<-c('系谱编号','ID','育种值','育种值标准误','育种值可靠性','育种值准确性','出生日期')
  write.csv(c,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\未筛选\\',i,'_公牛育种值.csv',sep=''),row.names=F)
  d<-b[which(b$aa==2),]
  d<-d[,-12]
  assign(paste('mx_',i,'_female',sep=''),d)
  d<-d[,c(1,8,4:7,11)]
  names(d)<-c('系谱编号','ID','育种值','育种值标准误','育种值可靠性','育种值准确性','出生日期')
  write.csv(d,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\未筛选\\',i,'_母牛育种值.csv',sep=''),row.names=F)
  #>>>>>>>>>>>>>>>>>>>>>>>>父系育种值>>>>>>>>>>>>>>>>>>>>>>>>>
  fx<-all[which(all[,1]==4&all[,3]==2),]
  fx$REL<-1-((fx$V9)^2)/a[which(a$name==i),3]
  fx<-fx[which(fx$REL>0&fx$REL!=1),]
  fx$AC<-sqrt(fx$REL)
  b<-merge(fx,ped_all,by.x='V5',by.y='code',all.x=T)
  b<-b[,-c(2:5,13:14)]
  c<-b[which(b$aa==1),]
  c<-c[,-12]
  assign(paste('fx_',i,'_male',sep=''),c)
  c<-c[,c(1,8,4:7,11)]
  names(c)<-c('系谱编号','ID','育种值','育种值标准误','育种值可靠性','育种值准确性','出生日期')
  write.csv(c,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\未筛选\\',i,'_公牛育种值.csv',sep=''),row.names=F)
  d<-b[which(b$aa==2),]
  d<-d[,-12]
  assign(paste('fx_',i,'_female',sep=''),d)
  d<-d[,c(1,8,4:7,11)]
  names(d)<-c('系谱编号','ID','育种值','育种值标准误','育种值可靠性','育种值准确性','出生日期')
  write.csv(d,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\未筛选\\',i,'_母牛育种值.csv',sep=''),row.names=F)
}

#####筛选公牛——根据出生年份筛选2009年以后，女儿5头以上，可靠性不等于1#####
#母系
name<-c('CE_H','SB_H','CE_C','SB_C')
for (i in name){
  a<-get(paste('mx_',i,'_male',sep=''))
  b<-a[which(lubridate::year(a$Bir_date)>2009),]
  c<-b
  c<-c[which(c$REL>mean(b$REL)),-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  assign(paste('mx_',i,'_male',sep=''),c)
  rm(a,c)
}
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors=F)
pedfreq<-data.frame(table(ped_all$Sire_code))
pedfreq<-pedfreq[-1,]

for (i in name){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'data',sep=''))
  f$herd<-as.numeric(substr(f$V2,1,nchar(f$V1)-4))
  a<-merge(f,ped_all,by.x=paste('V',ncol(f)-3,sep=''),by.y='code',all.x=T)
  a<-a[!duplicated(a[,1]),]
  b<-data.frame(table(a$Sire_code))
  b<-b[-1,]
  h<-a[,c(ncol(a)-2,ncol(f))]
  h<-h[!duplicated(h),]
  h2<-data.frame(table(h$Sire_code))
  h2<-h2[-1,]
  c<-get(paste('mx_',i,'_male',sep=''))
  e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
  e<-merge(e,pedfreq,by='Var1',all.x=T)
  e<-e[complete.cases(e$EBV),]
  rm(b,c)
  e<-merge(e,h2,by='Var1',all.x=T)
  e<-e[,c(1,7,9,10,2,11,3,4,5,6)]
  names(e)<-c('系谱编号','公牛号','出生日期','总女儿数','有表型的女儿数','群体数','估计育种值EBV','标准误','可靠性','准确性')
  e$出生年份<-lubridate::year(e$出生日期)
  write.csv(e,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\筛选\\',i,'.csv',sep=''),row.names = F)
  rm(f,e,a)
} 
#父系
for (i in name){
  a<-get(paste('fx_',i,'_male',sep=''))
  b<-a[which(lubridate::year(a$Bir_date)>2009),]
  c<-b
  c<-c[which(c$REL>mean(b$REL)),-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  c<-c[,c(1,6,2:5,8)]
  colnames(c)<-c('系谱编号','ID','育种值','育种值标准误','可靠性','准确性','出生日期')
  write.csv(c,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\筛选\\',i,'.csv',sep=''),row.names = F)
  rm(a,c)
}


######>>>>>>>>>>>>>>>>>>>>>>>>>>其他性状>>>>>>>>>>>>>>>>>>>>>#####
#####EBV提取#####
tnames<-c('AFC','AFS','ICF','IFL_C','IFL_H')
d<-data.frame(tnames)
d$A<-NA
for (i in tnames){
  assign(i,read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.PAROUT_STD',sep=''),col.names = c('V1','V2','V3','V4'),fill=NA))
  a<-get(i)
  d[which(d$tnames==i),2]<-a[2,2]
}
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors = F)
ped_all$Bir_date<-as.Date(ped_all$Bir_date,format='%Y/%m/%d')
ped_all<-ped_all[complete.cases(ped_all$Bir_date),]
ped_all[which(substr(ped_all$id,1,1)=='M'),8]<-1
ped_all[is.na(ped_all$V8),8]<-2
names(ped_all)[8]<-'aa'
for (i in tnames){
  assign(i,read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'.SOL',sep='')))
  a<-get(i)
  a<-a[which(a[,1]==4&a[,3]==1),]
  a$REL<-1-((a$V9)^2)/d[which(d$tnames==i),2]
  a<-a[which(a$REL>0),]
  a$AC<-sqrt(a$REL)
  b<-merge(a,ped_all,by.x='V5',by.y='code',all.x=T)
  b<-b[,-c(2:5,13:14)]
  c<-b[which(b$aa==1),]
  c<-c[complete.cases(c$Bir_date),]
  c<-c[,-12]
  assign(paste(i,'_EBV_ped_m',sep=''),c)
  c<-b[which(b$aa==2),]
  c<-c[complete.cases(c$Bir_date),]
  c<-c[,-11]
  assign(paste(i,'_EBV_ped_f',sep=''),c)
  a<-merge(a,ped_all,by.x='V5',by.y='code',all.x=T)
  a<-a[complete.cases(a$Bir_date),-c(2:7,12:14,16,17,18)]
  assign(paste(i,'_EBV',sep=''),a)
  rm(a,b,c)
}
#计算公牛、母牛育种值及可靠性
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_f',sep=''))
  print(paste(i,',',round(mean(a$V8)-sd(a$V8),3),'~',round(mean(a$V8)+sd(a$V8),3),',',round(mean(a$REL),4),sep=''))
  rm(a)
}
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  print(paste(i,',',round(mean(a$V8)-sd(a$V8),3),'~',round(mean(a$V8)+sd(a$V8),3),',',round(mean(a$REL),4),sep=''))
  rm(a)
}



library(magrittr)
library(dplyr)
#####保存母牛育种值#####
ped_f<-ped_all[,c(4,7)]
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_f',sep=''))
  a<-a[,c(1,4:8)]
  a<-merge(a,ped_f,by.x = 'V5',by.y='code',all.x=T)
  a<-a[,c(1,6,2:5,7)]
  colnames(a)<-c('系谱编号','ID','育种值','育种值标准误','可靠性','准确性','生日')
  write.csv(a,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\母牛\\',i,'.csv',sep=''),row.names=F)
}
#####保存公牛育种值#####
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  a<-a[,c(1,8,4:7,11)]
  colnames(a)<-c('系谱编号','ID','育种值','育种值标准误','可靠性','准确性','生日')
  write.csv(a,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\公牛\\未筛选\\',i,'.csv',sep=''),row.names=F)
}
######作图#####
# ped_all<-ped_all[,-8]
# pedfreq<-data.frame(table(ped_all$Sire_code))
# names(pedfreq)[2]<-'实际女儿数'
# library(plotrix)
# for (i in tnames){
#   a<-get(paste(i,'_EBV_ped_m',sep=''))
#   b<-a[which(lubridate::year(a$Bir_date)>1989),]
#   c<-b[,-c(2,3,10)]
#   names(c)[1:3]<-c('code','EBV','SE')
#   assign(paste(i,'pic',sep=''),c)
# }
# 
# for (i in tnames){
#   f<-read.table(paste('D:\\MASTER\\遗传评估\\201908\\遗传评估\\修改系谱后\\DMU\\',i,'data',sep=''))
#   a<-merge(f,ped_all,by.x=paste('V',ncol(f)-1,sep=''),by.y='code',all.x=T)
#   b<-data.frame(table(a$Sire_code))
#   b<-b[which(b$Freq>=5),]
#   b<-b[which(b$Var1!=1),]
#   c<-get(paste(i,'pic',sep=''))
#   e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
#   e<-merge(e,pedfreq,by='Var1',all.x=T)
#   e<-e[complete.cases(e$EBV),]
#   e$MEAN<-NA
#   e$SD<-NA
#   for (x in 1:length(e$Var1)){
#     e[x,10]<-mean(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
#     e[x,11]<-sd(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
#   }
#   e<-e[,c(1,7,8,9,2,3,4,5,6,10,11)]
#   names(e)<-c('系谱编号','MID','出生日期','总女儿数','有表型的女儿数','EBV','SE','REL','AC',paste(i,'_MEAN',sep=''),paste(i,'_SD',sep=''))
#   e<-e[,c(3,6,10)]
#   assign(paste(i,'pic',sep=''),e)
#   rm(f,e,a)
# }
# for (i in tnames){
#   a<-get(paste(i,'pic',sep=''))
#   a$year<-as.numeric(lubridate::year(a$出生日期))
#   b<-data.frame(table(a$year))
#   b$ebv<-NA
#   b$phy<-NA
#   for (x in 1:length(b$Var1)){
#     b[x,3]<-mean(a[which(a[,4]==b[x,1]),2])
#     b[x,4]<-mean(a[which(a[,4]==b[x,1]),3])
#   }
#   write.csv(b,paste('D:\\MASTER\\遗传评估\\201908\\遗传评估\\修改系谱后\\EBV统计\\',i,'遗传进展','.csv',sep=''),row.names=F)
#   rm(a,b)
# }




#####旧 筛选公牛——根据出生年份筛选2009年以后，女儿5头以上，可靠性不等于1#####
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  b<-a[which(lubridate::year(a$Bir_date)>2009),]
  c<-b
  c<-c[which(c$REL>mean(b$REL)),-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  assign(paste(i,'_EBV_ped_m',sep=''),c)
  rm(a,b,c)
}

for (i in tnames){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\201908\\遗传评估\\修改系谱后\\DMU\\',i,'data',sep=''))
  a<-merge(f,ped_all,by.x=paste('V',ncol(f)-1,sep=''),by.y='code',all.x=T)
  b<-data.frame(table(a$Sire_code))
  b<-b[which(b$Freq>=5),]
  b<-b[which(b$Var1!=1),]
  c<-get(paste(i,'_EBV_ped_m',sep=''))
  e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
  e<-merge(e,pedfreq,by='Var1',all.x=T)
  e<-e[complete.cases(e$EBV),]
  rm(b,c)
  e$MEAN<-NA
  e$SD<-NA
  for (x in 1:length(e$Var1)){
    e[x,10]<-mean(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
    e[x,11]<-sd(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
  }
  e<-e[,c(1,7,8,9,2,3,4,5,6,10,11)]
  names(e)<-c('系谱编号','MID','出生日期','总女儿数','有表型的女儿数','EBV','SE','REL','AC',paste(i,'_MEAN',sep=''),paste(i,'_SD',sep=''))
  e$出生年份<-lubridate::year(e$出生日期)
  write.csv(e,paste('D:/MASTER/遗传评估/201908/遗传评估/修改系谱后/结果/',i,'.csv',sep=''),row.names = F)
  rm(f,e,a)
}


######旧 筛选公牛（只筛选年份）#####
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  b<-a[which(lubridate::year(a$Bir_date)>=2004),]
  c<-b
  c<-c[which(c$REL>mean(b$REL)),-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  assign(paste(i,'_EBV_ped_m',sep=''),c)
  rm(a,b,c)
}

for (i in tnames){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\201908\\遗传评估\\修改系谱后\\DMU\\',i,'data',sep=''))
  a<-merge(f,ped_all,by.x=paste('V',ncol(f)-1,sep=''),by.y='code',all.x=T)
  b<-data.frame(table(a$Sire_code))
  b<-b[which(b$Var1!=1),]
  c<-get(paste(i,'_EBV_ped_m',sep=''))
  e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
  e<-merge(e,pedfreq,by='Var1',all.x=T)
  e<-e[complete.cases(e$EBV),]
  rm(b,c)
  e$MEAN<-NA
  e$SD<-NA
  for (x in 1:length(e$Var1)){
    e[x,10]<-mean(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
    e[x,11]<-sd(a[which(a[,5+ncol(f)]==e[x,1]),ncol(f)])
  }
  e<-e[,c(1,7,8,9,2,3,4,5,6,10,11)]
  names(e)<-c('系谱编号','公牛号','出生日期','总女儿数','有表型的女儿数','估计育种值EBV','标准误','可靠性','准确性',paste(i,'_女儿表型均值',sep=''),paste(i,'_女儿表型标准差',sep=''))
  e$出生年份<-lubridate::year(e$出生日期)
  write.csv(e,paste('D:/MASTER/遗传评估/201908/遗传评估/修改系谱后/结果/',i,'.csv',sep=''),row.names = F)
  rm(f,e,a)
}

#####筛选公牛——无条件#####
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  c<-a
  c<-c[,-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  assign(paste(i,'_EBV_ped_m',sep=''),c)
  rm(a,c)
}
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors=F)
pedfreq<-data.frame(table(ped_all$Sire_code))
pedfreq<-pedfreq[-1,]

for (i in tnames){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\201912\\DMU\\',i,'data',sep=''))
  f$herd<-as.numeric(substr(f$V1,1,nchar(f$V1)-4))
  a<-merge(f,ped_all,by.x=paste('V',ncol(f)-2,sep=''),by.y='code',all.x=T)
  a<-a[!duplicated(a[,1]),]
  b<-data.frame(table(a$Sire_code))
  b<-b[-1,]
  h<-a[,c(ncol(a)-2,ncol(f))]
  h<-h[!duplicated(h),]
  h2<-data.frame(table(h$Sire_code))
  h2<-h2[-1,]
  c<-get(paste(i,'_EBV_ped_m',sep=''))
  e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
  e<-merge(e,pedfreq,by='Var1',all.x=T)
  e<-e[complete.cases(e$EBV),]
  rm(b,c)
  e<-merge(e,h2,by='Var1',all.x=T)
  e<-e[,c(1,7,9,10,2,11,3,4,5,6)]
  names(e)<-c('系谱编号','公牛号','出生日期','总女儿数','有表型的女儿数','群体数','估计育种值EBV','标准误','可靠性','准确性')
  e$出生年份<-lubridate::year(e$出生日期)
  write.csv(e,paste('D:\\MASTER\\遗传评估\\201912\\结果\\育种值\\其他性状\\公牛\\',i,'.csv',sep=''),row.names = F)
  rm(f,e,a)
}

#####筛选公牛——根据出生年份筛选2009年以后，女儿5头以上，可靠性不等于1#####
for (i in tnames){
  a<-get(paste(i,'_EBV_ped_m',sep=''))
  b<-a[which(lubridate::year(a$Bir_date)>2009),]
  c<-b
  c<-c[which(c$REL>mean(b$REL)),-c(2,3,10)]
  names(c)[1:3]<-c('code','EBV','SE')
  assign(paste(i,'_EBV_ped_m',sep=''),c)
  rm(a,c)
}
ped_all<-read.csv('D:\\数据库\\北京\\系谱\\201912format.csv',stringsAsFactors=F)
pedfreq<-data.frame(table(ped_all$Sire_code))
pedfreq<-pedfreq[-1,]

for (i in tnames){
  if (i!='ICF'){
    f<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'data',sep=''))
    f$herd<-as.numeric(substr(f$V1,1,nchar(f$V1)-4))
    a<-merge(f,ped_all,by.x=paste('V',ncol(f)-2,sep=''),by.y='code',all.x=T)
    a<-a[!duplicated(a[,1]),]
    b<-data.frame(table(a$Sire_code))
    b<-b[-1,]
    h<-a[,c(ncol(a)-2,ncol(f))]
    h<-h[!duplicated(h),]
    h2<-data.frame(table(h$Sire_code))
    h2<-h2[-1,]
    c<-get(paste(i,'_EBV_ped_m',sep=''))
    e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
    e<-merge(e,pedfreq,by='Var1',all.x=T)
    e<-e[complete.cases(e$EBV),]
    rm(b,c)
    e<-merge(e,h2,by='Var1',all.x=T)
    e<-e[,c(1,7,9,10,2,11,3,4,5,6)]
    names(e)<-c('系谱编号','公牛号','出生日期','总女儿数','有表型的女儿数','群体数','估计育种值EBV','标准误','可靠性','准确性')
    e$出生年份<-lubridate::year(e$出生日期)
    write.csv(e,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\公牛\\筛选\\',i,'.csv',sep=''),row.names = F)
    rm(f,e,a)
   } else{
    f<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',i,'data',sep=''))
    f$herd<-as.numeric(substr(f$V2,1,nchar(f$V1)-4))
    a<-merge(f,ped_all,by.x=paste('V',ncol(f)-2,sep=''),by.y='code',all.x=T)
    a<-a[!duplicated(a[,1]),]
    b<-data.frame(table(a$Sire_code))
    b<-b[-1,]
    h<-a[,c(ncol(a)-2,ncol(f))]
    h<-h[!duplicated(h),]
    h2<-data.frame(table(h$Sire_code))
    h2<-h2[-1,]
    c<-get(paste(i,'_EBV_ped_m',sep=''))
    e<-merge(b,c,by.x='Var1',by.y='code',all.x=T)
    e<-merge(e,pedfreq,by='Var1',all.x=T)
    e<-e[complete.cases(e$EBV),]
    rm(b,c)
    e<-merge(e,h2,by='Var1',all.x=T)
    e<-e[,c(1,7,9,10,2,11,3,4,5,6)]
    names(e)<-c('系谱编号','公牛号','出生日期','总女儿数','有表型的女儿数','群体数','估计育种值EBV','标准误','可靠性','准确性')
    e$出生年份<-lubridate::year(e$出生日期)
    write.csv(e,paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\公牛\\筛选\\',i,'.csv',sep=''),row.names = F)
    rm(f,e,a)
  }
} 



#####计算性状均值####
tnames<-c('AFC','AFS','CE_C','CE_H','SB_C','SB_H','ICF','IFL_C','IFL_H')
d<-data.frame(tnames)
d$A<-NA
d$num<-NA
for (i in 1:9){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',tnames[i],'data',sep=''))
  d[i,2]<-paste(round(mean(f[,ncol(f)]),2),'±',round(sd(f[,ncol(f)]),2))
  d[i,3]<-nrow(f)
}
write.csv(d,'描述性统计.csv',row.names = F)
for (i in 3:6){
  f<-read.table(paste('D:\\MASTER\\遗传评估\\202008\\DMU\\',tnames[i],'data',sep=''))
  print(tnames[i])
  print(round(100*(nrow(f[which(f[,ncol(f)]==2),])+nrow(f[which(f[,ncol(f)]==3),]))/(nrow(f[which(f[,ncol(f)]==1),])+nrow(f[which(f[,ncol(f)]==2),])+nrow(f[which(f[,ncol(f)]==3),])),3))
  # print(nrow(f[which(f[,ncol(f)]==1),]))
  # print(nrow(f[which(f[,ncol(f)]==2),]))
  # print(nrow(f[which(f[,ncol(f)]==3),]))
}




#####计算育种值范围及可靠性#####
#其他性状
trait <- c('AFS','AFC','ICF','IFL_C','IFL_H')
t <- data.frame(trait)
t$trait <- as.character(t$trait)
t$mrange <- NA
t$mrel <- NA
t$frange <- NA
t$frel <- NA
for (i in 1:5){
  m <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\公牛\\未筛选\\',trait[i],'.csv',sep=''),stringsAsFactors = F)
  m <- m[m$可靠性 != 1&m$可靠性 != 0,]
  t[i,2] <- paste(round(min(m$育种值),2),'~',round(max(m$育种值),2),sep='')
  t[i,3] <- round(mean(m$可靠性),4)
  f <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\母牛\\',trait[i],'.csv',sep=''),stringsAsFactors = F)
  f <- f[f$可靠性 != 1&f$可靠性 != 0,]
  t[i,4] <- paste(round(min(f$育种值),2),'~',round(max(f$育种值),2),sep='')
  t[i,5] <- round(mean(f$可靠性),4)
}
write.csv(t,'D:\\MASTER\\遗传评估\\202008\\其他性状-总结部分.csv',row.names = F)
#产犊性状
trait <- c('SB_C','SB_H','CE_C','CE_H')
t <- data.frame(trait)
t$trait <- as.character(t$trait)
t$mrange_dam <- NA
t$mrel_dam <- NA
t$frange_dam <- NA
t$frel_dam <- NA
t$mrange_sire <- NA
t$mrel_sire <- NA
t$frange_sire <- NA
t$frel_sire <- NA
for (i in 1:4){
  m_dam <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\未筛选\\',trait[i],'_公牛育种值','.csv',sep=''),stringsAsFactors = F)
  t[i,2] <- paste(round(min(m_dam$育种值),3),'~',round(max(m_dam$育种值),3),sep='')
  t[i,3] <- round(mean(m_dam$育种值可靠性),4)
  f_dam <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\未筛选\\',trait[i],'_母牛育种值','.csv',sep=''),stringsAsFactors = F)
  t[i,4] <- paste(round(min(f_dam$育种值),3),'~',round(max(f_dam$育种值),3),sep='')
  t[i,5] <- round(mean(f_dam$育种值可靠性),4)
  m_sire <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\未筛选\\',trait[i],'_公牛育种值','.csv',sep=''),stringsAsFactors = F)
  t[i,6] <- paste(round(min(m_sire$育种值),3),'~',round(max(m_sire$育种值),3),sep='')
  t[i,7] <- round(mean(m_sire$育种值可靠性),4)
  f_sire <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\未筛选\\',trait[i],'_母牛育种值','.csv',sep=''),stringsAsFactors = F)
  t[i,8] <- paste(round(min(f_sire$育种值),3),'~',round(max(f_sire$育种值),3),sep='')
  t[i,9] <- round(mean(f_sire$育种值可靠性),4)
}
write.csv(t,'D:\\MASTER\\遗传评估\\202008\\产犊性状-总结部分.csv',row.names = F)

#####遗传进展图####
library(ggplot2)
library(grid) 
library(gtable)
windowsFonts(TNM = windowsFont("Times New Roman")) 
mytheme <- theme_bw()+
  theme(legend.position = 'top', 
        panel.border = element_blank(),
        panel.grid.major.x = element_blank(),
        legend.key =element_blank(),
        strip.background = element_blank(),
        axis.title = element_text(size = 18,family ='TNM',colour = 'black'),
        axis.text = element_text(size = 14,family ='TNM',colour = 'black'),
        plot.title = element_text(size = 18),
        axis.line = element_line(color = 'black',size = 1),
        axis.ticks = element_line(color = 'black',size = 1)
  )
ggplot2.two_y_axis <- function(g1, g2){
  g1 <- ggplotGrob(g1)
  g2 <- ggplotGrob(g2)}
#其他性状
trait <- c('AFS','AFC','ICF','IFL_C','IFL_H')
for (i in 1:5){
  m <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\其他性状\\公牛\\未筛选\\',trait[i],'.csv',sep=''),stringsAsFactors = F)
  m <- m[m$可靠性 != 1&m$可靠性 != 0,]
  m$year <- lubridate::year(as.Date(m$生日))
  m <- m[m$year >= 2000,]
  m <- m[rank(m$可靠性) >= 0.5*nrow(m),]
  m$year <- as.factor(m$year)
  df <- data.frame(table(m$year))
  df[,1] <- as.numeric(as.character(df[,1]))
  df$mean <- NA
  for (x in 1:nrow(df)){
    df[x,3] <- mean(m[m$year == df[x,1],3],na.rm = T)
  }
  p1 <- ggplot(df,aes(x = as.factor(Var1),y = mean,group = 1))+geom_line(size =1)+mytheme+geom_point(size=3)+
    labs(x = '出生年份',y = 'EBV均值',title = paste(trait[i],'遗传进展',sep=''))
  ggsave(paste('D:\\MASTER\\遗传评估\\202008\\遗传进展\\',trait[i],'遗传进展','.jpeg',sep=''),p1,width = 10,height = 5)
}
#产犊性状
trait <- c('SB_C','SB_H','CE_C','CE_H')
for (i in 1:4){
  m <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\母系\\未筛选\\',trait[i],'_公牛育种值','.csv',sep=''),stringsAsFactors = F)
  m <- m[m$育种值可靠性 != 1&m$育种值可靠性 != 0,]
  m$year <- lubridate::year(as.Date(m$出生日期,format = '%Y-%m-%d'))
  m <- m[m$year >= 2000,]
  m <- m[rank(m$育种值可靠性) >= 0.5*nrow(m),]
  m$year <- as.factor(m$year)
  df <- data.frame(table(m$year))
  df[,1] <- as.numeric(as.character(df[,1]))
  df$mean <- NA
  for (x in 1:nrow(df)){
    df[x,3] <- mean(m[m$year == df[x,1],3],na.rm = T)
  }
  p1 <- ggplot(df,aes(x = as.factor(Var1),y = mean,group = 1))+geom_line(size =1)+mytheme+geom_point(size=3)+
    labs(x = '出生年份',y = 'EBV均值',title = paste(trait[i],'遗传进展_母系',sep=''))
  ggsave(paste('D:\\MASTER\\遗传评估\\202008\\遗传进展\\',trait[i],'遗传进展_母系','.jpeg',sep=''),p1,width = 10,height = 5)
}
for (i in 1:4){
  m <- read.csv(paste('D:\\MASTER\\遗传评估\\202008\\结果\\育种值\\产犊性状\\父系\\未筛选\\',trait[i],'_公牛育种值','.csv',sep=''),stringsAsFactors = F)
  m <- m[m$育种值可靠性 != 1&m$育种值可靠性 != 0,]
  m$year <- lubridate::year(as.Date(m$出生日期,format = '%Y-%m-%d'))
  m <- m[m$year >= 2000,]
  m <- m[rank(m$育种值可靠性) >= 0.5*nrow(m),]
  m$year <- as.factor(m$year)
  df <- data.frame(table(m$year))
  df[,1] <- as.numeric(as.character(df[,1]))
  df$mean <- NA
  for (x in 1:nrow(df)){
    df[x,3] <- mean(m[m$year == df[x,1],3],na.rm = T)
  }
  p1 <- ggplot(df,aes(x = as.factor(Var1),y = mean,group = 1))+geom_line(size =1)+mytheme+geom_point(size=3)+
    labs(x = '出生年份',y = 'EBV均值',title = paste(trait[i],'遗传进展_父系',sep=''))
  ggsave(paste('D:\\MASTER\\遗传评估\\202008\\遗传进展\\',trait[i],'遗传进展_父系','.jpeg',sep=''),p1,width = 10,height = 5)
}
